{
  "stats": {
    "suites": 55,
    "tests": 186,
    "passes": 182,
    "pending": 4,
    "failures": 0,
    "start": "2022-07-15T16:09:26.383Z",
    "end": "2022-07-15T16:09:41.489Z",
    "duration": 15106,
    "testsRegistered": 188,
    "passPercent": 98.91304347826086,
    "pendingPercent": 2.127659574468085,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "fc8a2001-6875-404d-9eab-c16bb78753ac",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Get top level VHDL",
          "fullTitle": "Get top level VHDL",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity test_entity_name is\ngeneric (\n    a : integer;\n    b : unsigned;\n    c : signed;\n    d : std_logic;\n    e : std_logic_vector;\n    f : std_logic_vector(5 downto 0)\n  );\nport(\n  g : in std_logic;\n  h : out std_logic;\n  i : inout std_logic\n);\nend test_entity_name;  \narchitecture e_arch of test_entity_name is\nbegin \nend e_arch;\n`;\nconst expected = 'test_entity_name';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "3a3300e4-392c-4a7f-914c-e90f249b042f",
          "parentUUID": "fc8a2001-6875-404d-9eab-c16bb78753ac",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "Get top level Verilog",
          "fullTitle": "Get top level Verilog",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nmodule test_entity_name2 \n    #(\n        parameter a=8,\n        parameter b=9,\n        parameter c=10, d=11\n    )\n    (\n        input e,\n        output f,\n        input reg g,\n        input wire h,\n        input reg [7:0] i, j,\n        input wire [9:0] k,\n        output wire [9:0] l\n    );  \n\n    function [7:0] sum;  \n        input [7:0] a, b;  \n        begin  \n            sum = a + b;  \n        end  \n    endfunction\n\n    wire m;\n    wire n, p;\n    reg [1:0] q;\n\n    localparam r = 2;\n\n    always @(posedge a) begin : label_0\n    end\n\n    always_comb begin\n    end\n\n    always_ff begin : label_1\n    end\n\n    always_latch begin\n    end\n\n    test_entity_name \n    #(\n      .a(a ),\n      .b(b ),\n      .c(c ),\n      .d (d )\n    )\n    test_entity_name_dut (\n      .e (e ),\n      .f (f ),\n      .g (g ),\n      .h (h ),\n      .i (i ),\n      .j (j ),\n      .k (k ),\n      .l  ( l)\n    );\n  \nendmodule\n`;\nconst expected = 'test_entity_name2';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "7563fb81-d980-4517-a787-c2247e9ecc16",
          "parentUUID": "fc8a2001-6875-404d-9eab-c16bb78753ac",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "bb55ffca-4cab-4eb8-9b93-4aee56281399",
          "title": "Check diagram generator",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\diagram.spec.ts",
          "file": "\\tests\\documenter\\diagram.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "With ports and generics and color",
              "fullTitle": "Check diagram generator With ports and generics and color",
              "timedOut": false,
              "duration": 371,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "ba0006aa-d7ea-4b55-8363-88de73f2ca26",
              "parentUUID": "bb55ffca-4cab-4eb8-9b93-4aee56281399",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only ports and color",
              "fullTitle": "Check diagram generator Only ports and color",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "ef952323-09d5-4e3d-8346-8d7272ff81fe",
              "parentUUID": "bb55ffca-4cab-4eb8-9b93-4aee56281399",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only generics and color",
              "fullTitle": "Check diagram generator Only generics and color",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "fc11655c-0232-4422-883d-c44382332459",
              "parentUUID": "bb55ffca-4cab-4eb8-9b93-4aee56281399",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty and color",
              "fullTitle": "Check diagram generator Empty and color",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 3;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "7d6a1f24-da28-4c9c-a498-d0bab97bed26",
              "parentUUID": "bb55ffca-4cab-4eb8-9b93-4aee56281399",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With ports and generics and black and white",
              "fullTitle": "Check diagram generator With ports and generics and black and white",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 4;\nconst OPT = {\n    blackandwhite: true\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "82067e31-fe2f-4f6a-9239-05ecd26ed70d",
              "parentUUID": "bb55ffca-4cab-4eb8-9b93-4aee56281399",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba0006aa-d7ea-4b55-8363-88de73f2ca26",
            "ef952323-09d5-4e3d-8346-8d7272ff81fe",
            "fc11655c-0232-4422-883d-c44382332459",
            "7d6a1f24-da28-4c9c-a498-d0bab97bed26",
            "82067e31-fe2f-4f6a-9239-05ecd26ed70d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 395,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "89a16213-1965-4edf-aefc-cb356e2e2c28",
          "title": "Check documenter creator with html",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\documenter.spec.ts",
          "file": "\\tests\\documenter\\documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with html Entity VHDL",
              "timedOut": false,
              "duration": 960,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "c112e053-f545-4ec1-938f-b87c92023eea",
              "parentUUID": "89a16213-1965-4edf-aefc-cb356e2e2c28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with html Package VHDL",
              "timedOut": false,
              "duration": 405,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "fd1d2ebb-735a-438f-9b8d-497032fcf9bf",
              "parentUUID": "89a16213-1965-4edf-aefc-cb356e2e2c28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with html Module Verilog",
              "timedOut": false,
              "duration": 1229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "9985e04e-d7ba-498b-a10f-2b7c4791192e",
              "parentUUID": "89a16213-1965-4edf-aefc-cb356e2e2c28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with html Package SystemVerilog",
              "timedOut": false,
              "duration": 345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "ea1a7c23-2551-48ea-9b88-bce6283ef5b9",
              "parentUUID": "89a16213-1965-4edf-aefc-cb356e2e2c28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with html Interface SystemVerilog",
              "timedOut": false,
              "duration": 291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "ad039885-54ac-4683-8275-65578c0e7cb1",
              "parentUUID": "89a16213-1965-4edf-aefc-cb356e2e2c28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c112e053-f545-4ec1-938f-b87c92023eea",
            "fd1d2ebb-735a-438f-9b8d-497032fcf9bf",
            "9985e04e-d7ba-498b-a10f-2b7c4791192e",
            "ea1a7c23-2551-48ea-9b88-bce6283ef5b9",
            "ad039885-54ac-4683-8275-65578c0e7cb1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3230,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d2009ee-6db2-4f2b-b2d8-4372cb415f54",
          "title": "Check documenter creator with markdown",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\documenter.spec.ts",
          "file": "\\tests\\documenter\\documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with markdown Entity VHDL",
              "timedOut": false,
              "duration": 392,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "8650aa52-e695-473a-8ecd-5c24fdf89f6a",
              "parentUUID": "5d2009ee-6db2-4f2b-b2d8-4372cb415f54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with markdown Package VHDL",
              "timedOut": false,
              "duration": 275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "07ecc900-4f91-4753-bd76-7b1c0c8ab7d2",
              "parentUUID": "5d2009ee-6db2-4f2b-b2d8-4372cb415f54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with markdown Module Verilog",
              "timedOut": false,
              "duration": 652,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "c9f80520-b8dd-4a21-9d16-1eb8776eb27b",
              "parentUUID": "5d2009ee-6db2-4f2b-b2d8-4372cb415f54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Package SystemVerilog",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "afd06bb2-4d57-42cf-b9f6-489e21b240de",
              "parentUUID": "5d2009ee-6db2-4f2b-b2d8-4372cb415f54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Interface SystemVerilog",
              "timedOut": false,
              "duration": 352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "84cce30b-ece2-4d53-8806-07bf7d5bda07",
              "parentUUID": "5d2009ee-6db2-4f2b-b2d8-4372cb415f54",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8650aa52-e695-473a-8ecd-5c24fdf89f6a",
            "07ecc900-4f91-4753-bd76-7b1c0c8ab7d2",
            "c9f80520-b8dd-4a21-9d16-1eb8776eb27b",
            "afd06bb2-4d57-42cf-b9f6-489e21b240de",
            "84cce30b-ece2-4d53-8806-07bf7d5bda07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1974,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ea2ff41c-7bd7-40a7-83c3-b63e306404db",
          "title": "Test Doxygen elements single line and only 1 element in the description.",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\doxygen.spec.ts",
          "file": "\\tests\\documenter\\doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "85e892ac-6fc8-4d23-bf35-06a44bbf0590",
              "parentUUID": "ea2ff41c-7bd7-40a7-83c3-b63e306404db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "bd926575-4115-487e-ab22-1e3bc464285a",
              "parentUUID": "ea2ff41c-7bd7-40a7-83c3-b63e306404db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "1c1a6c1d-1228-4b31-9399-24d4a23aa008",
              "parentUUID": "ea2ff41c-7bd7-40a7-83c3-b63e306404db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "e3613778-26af-4928-8162-89be7836f559",
              "parentUUID": "ea2ff41c-7bd7-40a7-83c3-b63e306404db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "2f5181cf-8745-4513-93bd-ec6f4f71d57e",
              "parentUUID": "ea2ff41c-7bd7-40a7-83c3-b63e306404db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "d5e801da-582a-465c-8a37-21d7c628cf13",
              "parentUUID": "ea2ff41c-7bd7-40a7-83c3-b63e306404db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "231365cd-61fb-444d-a93e-65ed2cfeef0c",
              "parentUUID": "ea2ff41c-7bd7-40a7-83c3-b63e306404db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "ffb41136-5eb8-4fce-9032-fcc20e16b90b",
              "parentUUID": "ea2ff41c-7bd7-40a7-83c3-b63e306404db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85e892ac-6fc8-4d23-bf35-06a44bbf0590",
            "bd926575-4115-487e-ab22-1e3bc464285a",
            "1c1a6c1d-1228-4b31-9399-24d4a23aa008",
            "e3613778-26af-4928-8162-89be7836f559",
            "2f5181cf-8745-4513-93bd-ec6f4f71d57e",
            "d5e801da-582a-465c-8a37-21d7c628cf13",
            "231365cd-61fb-444d-a93e-65ed2cfeef0c",
            "ffb41136-5eb8-4fce-9032-fcc20e16b90b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "60d2f119-4511-43f9-a26a-badb7d62c1eb",
          "title": "Test Doxygen elements multi line and only 1 element in the description.",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\doxygen.spec.ts",
          "file": "\\tests\\documenter\\doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "94f2dbbf-3e73-4316-9f1e-713774200dc3",
              "parentUUID": "60d2f119-4511-43f9-a26a-badb7d62c1eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "5d9ea9b9-8505-4028-87ed-520de39f2c32",
              "parentUUID": "60d2f119-4511-43f9-a26a-badb7d62c1eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "87697c96-b4b2-4e81-985e-01f83caf6ec4",
              "parentUUID": "60d2f119-4511-43f9-a26a-badb7d62c1eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "9c77bc9a-324c-4cec-834d-fcea9d2bafca",
              "parentUUID": "60d2f119-4511-43f9-a26a-badb7d62c1eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "addd1a6a-baaa-473d-a4f2-660a529dfa9f",
              "parentUUID": "60d2f119-4511-43f9-a26a-badb7d62c1eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "1382c17a-a9e8-4dc3-86ad-90ddbc98046a",
              "parentUUID": "60d2f119-4511-43f9-a26a-badb7d62c1eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "df3f945a-9b24-425f-9b09-0e5390d443bd",
              "parentUUID": "60d2f119-4511-43f9-a26a-badb7d62c1eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "98da5400-c46f-4b64-90d3-55eb8b29e70a",
              "parentUUID": "60d2f119-4511-43f9-a26a-badb7d62c1eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94f2dbbf-3e73-4316-9f1e-713774200dc3",
            "5d9ea9b9-8505-4028-87ed-520de39f2c32",
            "87697c96-b4b2-4e81-985e-01f83caf6ec4",
            "9c77bc9a-324c-4cec-834d-fcea9d2bafca",
            "addd1a6a-baaa-473d-a4f2-660a529dfa9f",
            "1382c17a-a9e8-4dc3-86ad-90ddbc98046a",
            "df3f945a-9b24-425f-9b09-0e5390d443bd",
            "98da5400-c46f-4b64-90d3-55eb8b29e70a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "96a404ee-da39-4efe-8a40-e95b3d24b857",
          "title": "Check sections creator with html",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\section_creator.spec.ts",
          "file": "\\tests\\documenter\\section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with html Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "fe4dd60b-7947-4554-af06-a9221e1f65c3",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with html Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "056c3486-3a52-43a7-a507-2f5eb1f23c82",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with html Info section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "abf7fbce-2526-44e9-af8a-7f2b8e32fa9b",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with html Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, true);",
              "err": {},
              "uuid": "77b6f496-93e2-4ef3-9242-34c2dd545a1d",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with html Custom begin section",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "c9f2285d-2a7a-4c62-86af-17708fb9f631",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with html Custom end section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "dfa23378-ae36-4748-b9f2-65ca43003fc3",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with html Description section",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (configuration.output_type === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "8f706d51-ecd9-4742-ab39-712012716a30",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with html Port section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "d3dd2f42-1f7d-4eed-a37d-47d9026c1527",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with html Signal-constant section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "bec81fc2-4ff4-4b81-9fdd-5b538ed48185",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with html Process section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "c4068028-f6d6-408b-817c-ca2f673c55f0",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with html Function section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "001752db-ee9a-4f60-9fce-07a031ecbd88",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with html Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "55272f93-a375-49ca-98d2-9cd7c9cf73fd",
              "parentUUID": "96a404ee-da39-4efe-8a40-e95b3d24b857",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe4dd60b-7947-4554-af06-a9221e1f65c3",
            "056c3486-3a52-43a7-a507-2f5eb1f23c82",
            "abf7fbce-2526-44e9-af8a-7f2b8e32fa9b",
            "c9f2285d-2a7a-4c62-86af-17708fb9f631",
            "dfa23378-ae36-4748-b9f2-65ca43003fc3",
            "8f706d51-ecd9-4742-ab39-712012716a30",
            "d3dd2f42-1f7d-4eed-a37d-47d9026c1527",
            "bec81fc2-4ff4-4b81-9fdd-5b538ed48185",
            "c4068028-f6d6-408b-817c-ca2f673c55f0",
            "001752db-ee9a-4f60-9fce-07a031ecbd88",
            "55272f93-a375-49ca-98d2-9cd7c9cf73fd"
          ],
          "failures": [],
          "pending": [
            "77b6f496-93e2-4ef3-9242-34c2dd545a1d"
          ],
          "skipped": [],
          "duration": 179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
          "title": "Check sections creator with markdown",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\section_creator.spec.ts",
          "file": "\\tests\\documenter\\section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with markdown Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "b767925d-ce81-4e7d-97c3-a7d6a9679d96",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with markdown Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "c386cf52-4f5d-48b9-8551-7e76e62ba576",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with markdown Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "c947e43a-0766-413b-980e-23f7ee51487f",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with markdown Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, true);",
              "err": {},
              "uuid": "2f13d2d4-fa22-45a5-88e9-d9b4c6359bdd",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with markdown Custom begin section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "86206928-81dc-4ae2-ae73-83f2ad254ca9",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with markdown Custom end section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "e43153a9-1496-4ea2-8dff-4ff1d2a83ba1",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with markdown Description section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "if (configuration.output_type === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "62cea3fb-4e46-4381-8cea-da9afc98a25e",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with markdown Port section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "06c58ead-f94e-4758-a866-90a22cfb5e85",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with markdown Signal-constant section",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "99c368ff-a658-4eb0-ad67-9c4dd673fa4c",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with markdown Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "b9592625-e1b1-40a2-ad56-23542f46fe35",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with markdown Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "849e6b3b-23f2-4cf1-b053-dcd83c38aef2",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with markdown Instantiation section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "9ab092a1-9499-4afc-9ab8-dda017dacbea",
              "parentUUID": "3e46a0b1-2d1c-4481-817f-f8784abb2ef7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b767925d-ce81-4e7d-97c3-a7d6a9679d96",
            "c386cf52-4f5d-48b9-8551-7e76e62ba576",
            "c947e43a-0766-413b-980e-23f7ee51487f",
            "86206928-81dc-4ae2-ae73-83f2ad254ca9",
            "e43153a9-1496-4ea2-8dff-4ff1d2a83ba1",
            "06c58ead-f94e-4758-a866-90a22cfb5e85",
            "99c368ff-a658-4eb0-ad67-9c4dd673fa4c",
            "b9592625-e1b1-40a2-ad56-23542f46fe35",
            "849e6b3b-23f2-4cf1-b053-dcd83c38aef2",
            "9ab092a1-9499-4afc-9ab8-dda017dacbea"
          ],
          "failures": [],
          "pending": [
            "2f13d2d4-fa22-45a5-88e9-d9b4c6359bdd",
            "62cea3fb-4e46-4381-8cea-da9afc98a25e"
          ],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4674814a-a7e9-4d24-9c98-510419b163e3",
          "title": "Check standalone VHDL formatter",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\formatter\\formatter.spec.ts",
          "file": "\\tests\\formatter\\formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check align comments true, indentation and keyworks lowercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments true, indentation and keyworks lowercase",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    remove_comments: false,\n    remove_asserts: false,\n    remove_report: false,\n    check_alias: false,\n    align_comments: true,\n    sign_align_settings: {\n        is_regional: true,\n        is_all: true,\n        mode: common.ALIGN_MODE.LOCAL,\n        keyWords: [\"FUNCTION\", \"IMPURE FUNCTION\", \"GENERIC\", \"PORT\", \"PROCEDURE\"]\n    },\n    keyword_case: common.LETTER_CASE.LOWERCASE,\n    type_name_case: common.LETTER_CASE.LOWERCASE,\n    indentation: \"    \",\n    new_line_settings: {\n        new_line_after: [\";\", \"then\"],\n        no_new_line_after: []\n    },\n    end_of_line: \"\\n\"\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "0e1a46b0-4605-4067-8273-c34787099ce2",
              "parentUUID": "4674814a-a7e9-4d24-9c98-510419b163e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check align comments false, indentation and keyworks uppercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments false, indentation and keyworks uppercase",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    remove_comments: false,\n    remove_asserts: false,\n    remove_report: false,\n    check_alias: false,\n    align_comments: false,\n    sign_align_settings: {\n        is_regional: true,\n        is_all: true,\n        mode: common.ALIGN_MODE.LOCAL,\n        keyWords: [\"FUNCTION\", \"IMPURE FUNCTION\", \"GENERIC\", \"PORT\", \"PROCEDURE\"]\n    },\n    keyword_case: common.LETTER_CASE.UPPERCASE,\n    type_name_case: common.LETTER_CASE.UPPERCASE,\n    indentation: \"      \",\n    new_line_settings: {\n        new_line_after: [\";\", \"then\"],\n        no_new_line_after: []\n    },\n    end_of_line: \"\\n\"\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "be6d5d4f-9c00-48e9-a98b-d5fb5577e652",
              "parentUUID": "4674814a-a7e9-4d24-9c98-510419b163e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e1a46b0-4605-4067-8273-c34787099ce2",
            "be6d5d4f-9c00-48e9-a98b-d5fb5577e652"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3258e426-fdb8-4c9e-ac80-dd66342e160e",
          "title": "Check istyle formatter",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\formatter\\formatter.spec.ts",
          "file": "\\tests\\formatter\\formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check ansi with indent = 2",
              "fullTitle": "Check istyle formatter Check ansi with indent = 2",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "4b79f019-41e3-4200-b90a-784abffc15b0",
              "parentUUID": "3258e426-fdb8-4c9e-ac80-dd66342e160e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 2",
              "fullTitle": "Check istyle formatter Check kr with indent = 2",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "dddb8fc8-d520-4f8e-8d78-a2b0a95c4289",
              "parentUUID": "3258e426-fdb8-4c9e-ac80-dd66342e160e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 2",
              "fullTitle": "Check istyle formatter Check gnu with indent = 2",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "9740af89-e25b-4b19-b9e9-6a07a649a8e6",
              "parentUUID": "3258e426-fdb8-4c9e-ac80-dd66342e160e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check onlyindent with indent = 2",
              "fullTitle": "Check istyle formatter Check onlyindent with indent = 2",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "0fc7f413-3089-4f88-bc67-1fa9e0857ebe",
              "parentUUID": "3258e426-fdb8-4c9e-ac80-dd66342e160e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check ansi with indent = 6",
              "fullTitle": "Check istyle formatter Check ansi with indent = 6",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "45171789-90c6-4819-9fb9-2e27c4ab95ae",
              "parentUUID": "3258e426-fdb8-4c9e-ac80-dd66342e160e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 6",
              "fullTitle": "Check istyle formatter Check kr with indent = 6",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "211283d5-0540-49ed-a551-fd7dbfab067c",
              "parentUUID": "3258e426-fdb8-4c9e-ac80-dd66342e160e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 6",
              "fullTitle": "Check istyle formatter Check gnu with indent = 6",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "d7625bca-f86d-4ee0-a60b-4855cd6069b3",
              "parentUUID": "3258e426-fdb8-4c9e-ac80-dd66342e160e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check onlyindent with indent = 6",
              "fullTitle": "Check istyle formatter Check onlyindent with indent = 6",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "c90102ac-0a7f-4f58-b8e3-403e2ad59a66",
              "parentUUID": "3258e426-fdb8-4c9e-ac80-dd66342e160e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4b79f019-41e3-4200-b90a-784abffc15b0",
            "dddb8fc8-d520-4f8e-8d78-a2b0a95c4289",
            "9740af89-e25b-4b19-b9e9-6a07a649a8e6",
            "0fc7f413-3089-4f88-bc67-1fa9e0857ebe",
            "45171789-90c6-4819-9fb9-2e27c4ab95ae",
            "211283d5-0540-49ed-a551-fd7dbfab067c",
            "d7625bca-f86d-4ee0-a60b-4855cd6069b3",
            "c90102ac-0a7f-4f58-b8e3-403e2ad59a66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 241,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "11b2a897-69ca-469a-afe8-43a87813f9dd",
          "title": "Check s3sv formatter",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\formatter\\formatter.spec.ts",
          "file": "\\tests\\formatter\\formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check config 0",
              "fullTitle": "Check s3sv formatter Check config 0",
              "timedOut": false,
              "duration": 2197,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    python3_path: \"\",\n    use_tabs: false,\n    indent_size: 2,\n    one_bind_per_line: true,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "a696eeb2-6475-48f5-b771-6fd30d0a0c54",
              "parentUUID": "11b2a897-69ca-469a-afe8-43a87813f9dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 1",
              "fullTitle": "Check s3sv formatter Check config 1",
              "timedOut": false,
              "duration": 164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    python3_path: \"\",\n    use_tabs: true,\n    indent_size: 4,\n    one_bind_per_line: true,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "54f927de-5f5f-4f9e-acdc-beca06b99b22",
              "parentUUID": "11b2a897-69ca-469a-afe8-43a87813f9dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 2 and bad python3 path",
              "fullTitle": "Check s3sv formatter Check config 2 and bad python3 path",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst options = {\n    python3_path: \"asdf\",\n    use_tabs: true,\n    indent_size: 2,\n    one_bind_per_line: false,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "c4608538-2f3d-4b6c-8217-f5d2ac99a655",
              "parentUUID": "11b2a897-69ca-469a-afe8-43a87813f9dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a696eeb2-6475-48f5-b771-6fd30d0a0c54",
            "54f927de-5f5f-4f9e-acdc-beca06b99b22",
            "c4608538-2f3d-4b6c-8217-f5d2ac99a655"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2565,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1c86db5f-449d-4036-ac53-5a7926c38f35",
          "title": "Check FSM for vhdl",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\fsm.spec.ts",
          "file": "\\tests\\parser\\fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for vhdl Normal",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "3c3caced-4bc5-4994-aba3-ce423924ae92",
              "parentUUID": "1c86db5f-449d-4036-ac53-5a7926c38f35",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c3caced-4bc5-4994-aba3-ce423924ae92"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 112,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a45ff20f-5b86-4522-a191-7ffdcf486983",
          "title": "Check FSM for verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\fsm.spec.ts",
          "file": "\\tests\\parser\\fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for verilog Normal",
              "timedOut": false,
              "duration": 369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "4fc3348d-69e5-4bf0-8d56-7d679a07fad1",
              "parentUUID": "a45ff20f-5b86-4522-a191-7ffdcf486983",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4fc3348d-69e5-4bf0-8d56-7d679a07fad1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 369,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "435e0221-e8a5-443e-a225-3d8da71247d9",
          "title": "Check entity Verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
          "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5ba872f1-1929-4648-abba-4aaa4d3f6e5f",
              "title": "Check entity.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity Verilog Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 233,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "8dfb67fb-8723-4545-b6e3-172303a1d1a8",
                  "parentUUID": "5ba872f1-1929-4648-abba-4aaa4d3f6e5f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity Verilog Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "eb3f7e60-32a5-49d4-b5b8-90dd5f6df1a4",
                  "parentUUID": "5ba872f1-1929-4648-abba-4aaa4d3f6e5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity Verilog Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "f0ff3e1a-b10e-41fc-aab7-f686cc6abf41",
                  "parentUUID": "5ba872f1-1929-4648-abba-4aaa4d3f6e5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb3f7e60-32a5-49d4-b5b8-90dd5f6df1a4",
                "f0ff3e1a-b10e-41fc-aab7-f686cc6abf41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5b7f66ab-3e59-4c71-ae22-7e74d77dff89",
              "title": "Check generic.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity Verilog Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 281,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "5fae4cc6-4577-43e4-9a51-e01abb3fb9aa",
                  "parentUUID": "5b7f66ab-3e59-4c71-ae22-7e74d77dff89",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check generic. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"8\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "adb7260f-60c2-48ba-a4a2-a33546b48920",
                  "parentUUID": "5b7f66ab-3e59-4c71-ae22-7e74d77dff89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity Verilog Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"9\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "eebd2af0-628f-4250-87fc-c1f8ff567e9f",
                  "parentUUID": "5b7f66ab-3e59-4c71-ae22-7e74d77dff89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"10\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "b0b24809-41aa-479d-8790-4f5325afaf64",
                  "parentUUID": "5b7f66ab-3e59-4c71-ae22-7e74d77dff89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"11\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "b8e10329-d740-4cf0-b0ec-b69e29b3aa55",
                  "parentUUID": "5b7f66ab-3e59-4c71-ae22-7e74d77dff89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "adb7260f-60c2-48ba-a4a2-a33546b48920",
                "eebd2af0-628f-4250-87fc-c1f8ff567e9f",
                "b0b24809-41aa-479d-8790-4f5325afaf64",
                "b8e10329-d740-4cf0-b0ec-b69e29b3aa55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
              "title": "Check port.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity Verilog Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 216,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "51c20218-c04e-45e6-8b6e-b8d2775bb775",
                  "parentUUID": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity Verilog Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "1da14373-3390-497e-b3fc-3a8815b09e8e",
                  "parentUUID": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity Verilog Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "825b096c-dd53-4163-b423-8032f49750a1",
                  "parentUUID": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input reg port",
                  "fullTitle": "Check entity Verilog Check port. Check input reg port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"g\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "5007a01f-2374-45bd-9a24-81172aac9bbf",
                  "parentUUID": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire port",
                  "fullTitle": "Check entity Verilog Check port. Check input wire port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"h\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "0b2764ef-74d4-4544-85b8-2dc92d7356f0",
                  "parentUUID": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 0",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"i\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "b0327ced-a1b7-46fd-8c76-bf321b29b4bf",
                  "parentUUID": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 1",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "this.skip();\nconst actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"j\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "49a53908-88bb-42c3-aca9-0e5a3c5774c9",
                  "parentUUID": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire array",
                  "fullTitle": "Check entity Verilog Check port. Check input wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"k\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "3ffec8d8-1195-4064-85bd-383c37a7823d",
                  "parentUUID": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output wire array",
                  "fullTitle": "Check entity Verilog Check port. Check output wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[7];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"l\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "3850eef4-45dd-4012-afe6-ad42aa5d2270",
                  "parentUUID": "ae0cd9da-7130-4a46-9b9e-66f48f31e6b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1da14373-3390-497e-b3fc-3a8815b09e8e",
                "825b096c-dd53-4163-b423-8032f49750a1",
                "5007a01f-2374-45bd-9a24-81172aac9bbf",
                "0b2764ef-74d4-4544-85b8-2dc92d7356f0",
                "b0327ced-a1b7-46fd-8c76-bf321b29b4bf",
                "3ffec8d8-1195-4064-85bd-383c37a7823d",
                "3850eef4-45dd-4012-afe6-ad42aa5d2270"
              ],
              "failures": [],
              "pending": [
                "49a53908-88bb-42c3-aca9-0e5a3c5774c9"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83e901f2-ae5d-45f3-aa2f-fe73d1fc8b9e",
              "title": "Check signal.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity Verilog Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 320,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "53d274e7-cc5d-4521-9522-cf1d8297db54",
                  "parentUUID": "83e901f2-ae5d-45f3-aa2f-fe73d1fc8b9e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "f9b96815-5e47-469f-9da6-f576e7baf05f",
                  "parentUUID": "83e901f2-ae5d-45f3-aa2f-fe73d1fc8b9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"n\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "cae32a3a-f224-4e7f-82ca-a49a503cafe1",
                  "parentUUID": "83e901f2-ae5d-45f3-aa2f-fe73d1fc8b9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"p\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "86bebeb1-ae20-451c-a31d-edbe33397706",
                  "parentUUID": "83e901f2-ae5d-45f3-aa2f-fe73d1fc8b9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check array",
                  "fullTitle": "Check entity Verilog Check signal. Check array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"q\",\n        description: \"\"\n    },\n    type: \"reg [1:0]\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "e65630c4-cd17-4d90-9d97-3c0488bbe602",
                  "parentUUID": "83e901f2-ae5d-45f3-aa2f-fe73d1fc8b9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9b96815-5e47-469f-9da6-f576e7baf05f",
                "cae32a3a-f224-4e7f-82ca-a49a503cafe1",
                "86bebeb1-ae20-451c-a31d-edbe33397706",
                "e65630c4-cd17-4d90-9d97-3c0488bbe602"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1171ab3a-60c5-4bb6-8106-a1ec23c43d0b",
              "title": "Check constant.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 246,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "f4739bef-7f13-4f8d-9cb9-be6f7034317d",
                  "parentUUID": "1171ab3a-60c5-4bb6-8106-a1ec23c43d0b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"r\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"2\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "a230938e-6b7b-4395-aabe-21028a7e648e",
                  "parentUUID": "1171ab3a-60c5-4bb6-8106-a1ec23c43d0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a230938e-6b7b-4395-aabe-21028a7e648e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d99e6e6b-52e7-4500-8fe4-fcab3f535876",
              "title": "Check function.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 251,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "46f9b0a0-eb0b-4d12-a9bb-cbb0310f54dd",
                  "parentUUID": "d99e6e6b-52e7-4500-8fe4-fcab3f535876",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "f48e71b7-31f4-4b66-80f9-48d169a65da9",
                  "parentUUID": "d99e6e6b-52e7-4500-8fe4-fcab3f535876",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f48e71b7-31f4-4b66-80f9-48d169a65da9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa42bdd3-fd85-4af2-b042-e15f69f422ee",
              "title": "Check always.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check always.\"",
                  "fullTitle": "Check entity Verilog Check always. \"before all\" hook in \"Check always.\"",
                  "timedOut": false,
                  "duration": 273,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "5b3d1eab-7fbb-45bf-a271-57d402ed1139",
                  "parentUUID": "aa42bdd3-fd85-4af2-b042-e15f69f422ee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check always with sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always with sensitive list and label",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"@(posedge a)\",\n    type: \"always\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "911c4dec-e301-43f9-871f-9406aad80011",
                  "parentUUID": "aa42bdd3-fd85-4af2-b042-e15f69f422ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_comb without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_comb without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_comb\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "8b29b374-da99-4d9f-b08c-000db2e60e53",
                  "parentUUID": "aa42bdd3-fd85-4af2-b042-e15f69f422ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_ff without sensitive list and with label",
                  "fullTitle": "Check entity Verilog Check always. Check always_ff without sensitive list and with label",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_ff\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "38eedc40-c7e7-46d2-917c-a1705ee5cbb6",
                  "parentUUID": "aa42bdd3-fd85-4af2-b042-e15f69f422ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_latch without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_latch without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_latch\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "7cef07d2-df5e-4df0-b952-23928b44ac7f",
                  "parentUUID": "aa42bdd3-fd85-4af2-b042-e15f69f422ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "911c4dec-e301-43f9-871f-9406aad80011",
                "8b29b374-da99-4d9f-b08c-000db2e60e53",
                "38eedc40-c7e7-46d2-917c-a1705ee5cbb6",
                "7cef07d2-df5e-4df0-b952-23928b44ac7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90cc03be-3936-4090-bec1-351dd28799ed",
              "title": "Check instantiation.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity Verilog Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 343,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "a7992d30-9cfd-418a-bed5-7a3983f851c4",
                  "parentUUID": "90cc03be-3936-4090-bec1-351dd28799ed",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity Verilog Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"test_entity_name_dut\",\n        description: \"\"\n    },\n    type: \"test_entity_name\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "53bc5df8-92aa-4273-a148-01d088b1e32b",
                  "parentUUID": "90cc03be-3936-4090-bec1-351dd28799ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53bc5df8-92aa-4273-a148-01d088b1e32b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e7c8c783-e0ba-46cb-9674-3f0787b06c2a",
          "title": "Check interface declaration Verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_interface.spec.ts",
          "file": "\\tests\\parser\\parser_verilog_interface.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d76426af-f11d-4d21-930a-408c854f5b8d",
              "title": "Check global.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_interface.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check global.\"",
                  "fullTitle": "Check interface declaration Verilog Check global. \"before all\" hook in \"Check global.\"",
                  "timedOut": false,
                  "duration": 243,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "a2927e76-bc88-4fdf-83ef-5d7c1a446984",
                  "parentUUID": "d76426af-f11d-4d21-930a-408c854f5b8d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check interface declaration Verilog Check global. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, '');",
                  "err": {},
                  "uuid": "14308d34-eb43-425e-9411-2272f5eb0e38",
                  "parentUUID": "d76426af-f11d-4d21-930a-408c854f5b8d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is interface declaration",
                  "fullTitle": "Check interface declaration Verilog Check global. Check type is interface declaration",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.INTERFACE_DECLARATION);",
                  "err": {},
                  "uuid": "90cfc95f-3d6d-477d-a57e-477f88d8dd22",
                  "parentUUID": "d76426af-f11d-4d21-930a-408c854f5b8d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14308d34-eb43-425e-9411-2272f5eb0e38",
                "90cfc95f-3d6d-477d-a57e-477f88d8dd22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e34979e1-7a1c-4c84-9598-4cdd8e595a0f",
              "title": "Check interfaces.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_interface.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check interfaces.\"",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. \"before all\" hook in \"Check interfaces.\"",
                  "timedOut": false,
                  "duration": 327,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_interface_array();",
                  "err": {},
                  "uuid": "5273a822-06b0-45c9-ab7f-985e413246fb",
                  "parentUUID": "e34979e1-7a1c-4c84-9598-4cdd8e595a0f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check interface 0",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[0], \"interface_0\");",
                  "err": {},
                  "uuid": "91fcbf79-09d4-4276-9e17-ecc3355de60d",
                  "parentUUID": "e34979e1-7a1c-4c84-9598-4cdd8e595a0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check interface 1",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[1], \"interface_1\");",
                  "err": {},
                  "uuid": "cc5cc50c-7ff5-402b-9cf0-0a447059ef67",
                  "parentUUID": "e34979e1-7a1c-4c84-9598-4cdd8e595a0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91fcbf79-09d4-4276-9e17-ecc3355de60d",
                "cc5cc50c-7ff5-402b-9cf0-0a447059ef67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98dde743-6d8f-4c5f-a58d-2241d1863089",
              "title": "Check type.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_interface.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check interface declaration Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 221,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "6f482eb3-60b4-40e0-b47e-c54b13ef2104",
                  "parentUUID": "98dde743-6d8f-4c5f-a58d-2241d1863089",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check interface declaration Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst logic_item_0 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 9,\n            column: 0\n        },\n        name: \"l_0\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst logic_item_1 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 10,\n            column: 0\n        },\n        name: \"l_1\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"slot_t\",\n        description: \"\"\n    },\n    type: \"\",\n    logic: [logic_item_0, logic_item_1]\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "74b41319-45e0-407d-b52c-442719e375b8",
                  "parentUUID": "98dde743-6d8f-4c5f-a58d-2241d1863089",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74b41319-45e0-407d-b52c-442719e375b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7a5be9ce-2acf-4d97-9a44-cefcfed477e9",
          "title": "Check package Verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
          "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4b18c18f-82d3-4d1e-87d4-55f66c717ffc",
              "title": "Check package.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check package.\"",
                  "fullTitle": "Check package Verilog Check package. \"before all\" hook in \"Check package.\"",
                  "timedOut": false,
                  "duration": 317,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "67f7b69e-8093-47a5-a9f9-22a42299af8c",
                  "parentUUID": "4b18c18f-82d3-4d1e-87d4-55f66c717ffc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package Verilog Check package. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_pkg');",
                  "err": {},
                  "uuid": "f94af34b-d4fd-4bf7-aca6-4dafad16569f",
                  "parentUUID": "4b18c18f-82d3-4d1e-87d4-55f66c717ffc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is package",
                  "fullTitle": "Check package Verilog Check package. Check type is package",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "661952ed-a1e4-42fb-a882-bc3a674d0362",
                  "parentUUID": "4b18c18f-82d3-4d1e-87d4-55f66c717ffc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f94af34b-d4fd-4bf7-aca6-4dafad16569f",
                "661952ed-a1e4-42fb-a882-bc3a674d0362"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a2c77c3-1e6d-48aa-8082-1edbb1a26801",
              "title": "Check constant.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 320,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "c7f67ef1-13e6-4bcf-9d8f-d5d43f481c4a",
                  "parentUUID": "0a2c77c3-1e6d-48aa-8082-1edbb1a26801",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "8f632b12-1a63-4efe-930c-acdf26e088a7",
                  "parentUUID": "0a2c77c3-1e6d-48aa-8082-1edbb1a26801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"9\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "312ce58d-805b-47ed-b016-56fdca614f41",
                  "parentUUID": "0a2c77c3-1e6d-48aa-8082-1edbb1a26801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"10\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "f967fd2d-3757-4f21-989b-b87e03546c33",
                  "parentUUID": "0a2c77c3-1e6d-48aa-8082-1edbb1a26801",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f632b12-1a63-4efe-930c-acdf26e088a7",
                "312ce58d-805b-47ed-b016-56fdca614f41",
                "f967fd2d-3757-4f21-989b-b87e03546c33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a09f95af-ab35-40ca-9aea-34dca29d9a3f",
              "title": "Check function.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 310,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "9ad4496f-d05b-460d-a066-838107609682",
                  "parentUUID": "a09f95af-ab35-40ca-9aea-34dca29d9a3f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "07349bb3-0386-4be8-a60a-f14903190e37",
                  "parentUUID": "a09f95af-ab35-40ca-9aea-34dca29d9a3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07349bb3-0386-4be8-a60a-f14903190e37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b2d673e-8019-4d8b-b813-bace247fe721",
              "title": "Check type.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 285,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "8b8658b9-9926-41fb-a322-296a2ebf9fa6",
                  "parentUUID": "8b2d673e-8019-4d8b-b813-bace247fe721",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"op_list\",\n        description: \"\"\n    },\n    type: \"enum {ADD, SUB}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "8cf99f27-8273-40e0-8dec-4105e3560c60",
                  "parentUUID": "8b2d673e-8019-4d8b-b813-bace247fe721",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"port_t\",\n        description: \"\"\n    },\n    type: \"struct {logic [4:0] a, b; logic [9:0] m;}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "f6944c4b-fa32-45f5-a692-7ce0199a23d3",
                  "parentUUID": "8b2d673e-8019-4d8b-b813-bace247fe721",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cf99f27-8273-40e0-8dec-4105e3560c60",
                "f6944c4b-fa32-45f5-a692-7ce0199a23d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "179adf72-6221-49e1-80e6-597f1f3c1f19",
          "title": "Check entity VHDL",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
          "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fa7170ce-9313-4fe6-bf19-2d6fa6bbb346",
              "title": "Check entity.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity VHDL Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 33,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "9c71dbf5-31be-473b-8a39-44cd6add3bf5",
                  "parentUUID": "fa7170ce-9313-4fe6-bf19-2d6fa6bbb346",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity VHDL Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "40db03ec-fb50-48af-9cc3-f7e818cea23d",
                  "parentUUID": "fa7170ce-9313-4fe6-bf19-2d6fa6bbb346",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity VHDL Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "82ec5ae8-80b3-4be2-87d9-9fd5ae1a7719",
                  "parentUUID": "fa7170ce-9313-4fe6-bf19-2d6fa6bbb346",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40db03ec-fb50-48af-9cc3-f7e818cea23d",
                "82ec5ae8-80b3-4be2-87d9-9fd5ae1a7719"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81ee3a53-470f-4734-a565-c582d592b26c",
              "title": "Check generic.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity VHDL Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "21fabb43-2c38-4f72-b152-185851cde460",
                  "parentUUID": "81ee3a53-470f-4734-a565-c582d592b26c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"\",\n    type: \"integer\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "563d2433-add0-432c-bef0-47a73e9b4996",
                  "parentUUID": "81ee3a53-470f-4734-a565-c582d592b26c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity VHDL Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "aa09d2e3-c6dd-456d-91f1-6df612d873e3",
                  "parentUUID": "81ee3a53-470f-4734-a565-c582d592b26c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "dbc1fb3f-ec02-43f9-8520-c4be15d9115c",
                  "parentUUID": "81ee3a53-470f-4734-a565-c582d592b26c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "cd211500-943e-47a9-8e86-9900560ad8ad",
                  "parentUUID": "81ee3a53-470f-4734-a565-c582d592b26c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "563d2433-add0-432c-bef0-47a73e9b4996",
                "aa09d2e3-c6dd-456d-91f1-6df612d873e3",
                "dbc1fb3f-ec02-43f9-8520-c4be15d9115c",
                "cd211500-943e-47a9-8e86-9900560ad8ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e598ba1-7614-4a9b-833e-9e0b67de3b10",
              "title": "Check port.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity VHDL Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "c33bd87d-f03a-4ccb-98e6-68b4f5cdb2f5",
                  "parentUUID": "2e598ba1-7614-4a9b-833e-9e0b67de3b10",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity VHDL Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"x\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "9d648b5b-4a2b-4cd9-a016-c9a3edb33b86",
                  "parentUUID": "2e598ba1-7614-4a9b-833e-9e0b67de3b10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity VHDL Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"y\",\n        description: \"\"\n    },\n    direction: \"out\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "51254fd6-491f-437f-8cee-5aca6b0d385f",
                  "parentUUID": "2e598ba1-7614-4a9b-833e-9e0b67de3b10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check inout port",
                  "fullTitle": "Check entity VHDL Check port. Check inout port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"z\",\n        description: \"\"\n    },\n    direction: \"inout\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "c4dcdc91-bc70-4b67-84e4-ce6862beeef9",
                  "parentUUID": "2e598ba1-7614-4a9b-833e-9e0b67de3b10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check std_logic_vector port",
                  "fullTitle": "Check entity VHDL Check port. Check std_logic_vector port",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "54c7b5ad-def0-41f7-a093-053954cdd82c",
                  "parentUUID": "2e598ba1-7614-4a9b-833e-9e0b67de3b10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check port with default value",
                  "fullTitle": "Check entity VHDL Check port. Check port with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: '\"0010\"',\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "553c1c4f-b6f1-4fa6-a543-2bf197f4dbc7",
                  "parentUUID": "2e598ba1-7614-4a9b-833e-9e0b67de3b10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "585ee9aa-0b0f-4ad5-aa0d-9f2e8c638236",
                  "parentUUID": "2e598ba1-7614-4a9b-833e-9e0b67de3b10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "496ba48d-c982-41af-af81-a773035828f4",
                  "parentUUID": "2e598ba1-7614-4a9b-833e-9e0b67de3b10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d648b5b-4a2b-4cd9-a016-c9a3edb33b86",
                "51254fd6-491f-437f-8cee-5aca6b0d385f",
                "c4dcdc91-bc70-4b67-84e4-ce6862beeef9",
                "54c7b5ad-def0-41f7-a093-053954cdd82c",
                "553c1c4f-b6f1-4fa6-a543-2bf197f4dbc7",
                "585ee9aa-0b0f-4ad5-aa0d-9f2e8c638236",
                "496ba48d-c982-41af-af81-a773035828f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9baf4327-dfa2-4bc8-8fff-aaf17a307ff8",
              "title": "Check signal.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "c9b372ad-0630-4dc7-891a-1534057acadc",
                  "parentUUID": "9baf4327-dfa2-4bc8-8fff-aaf17a307ff8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "7c3b4102-0dd3-49b6-821b-7cfbbe697308",
                  "parentUUID": "9baf4327-dfa2-4bc8-8fff-aaf17a307ff8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "9f8df953-7d15-4bc8-961d-66d8c3ebe7a1",
                  "parentUUID": "9baf4327-dfa2-4bc8-8fff-aaf17a307ff8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "94f1c71b-04fd-49db-ba29-e08c1d4f3bbc",
                  "parentUUID": "9baf4327-dfa2-4bc8-8fff-aaf17a307ff8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c3b4102-0dd3-49b6-821b-7cfbbe697308",
                "9f8df953-7d15-4bc8-961d-66d8c3ebe7a1",
                "94f1c71b-04fd-49db-ba29-e08c1d4f3bbc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d10ed5d6-6d5d-44c4-a97e-32cff7042148",
              "title": "Check constant.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "e305101f-0f33-492a-9a1f-b7de4270ba8f",
                  "parentUUID": "d10ed5d6-6d5d-44c4-a97e-32cff7042148",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "0601300b-5877-426d-a5e1-23705a90f5d1",
                  "parentUUID": "d10ed5d6-6d5d-44c4-a97e-32cff7042148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "f40ae88e-0f9c-4d3a-99df-73fd234bb30b",
                  "parentUUID": "d10ed5d6-6d5d-44c4-a97e-32cff7042148",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0601300b-5877-426d-a5e1-23705a90f5d1",
                "f40ae88e-0f9c-4d3a-99df-73fd234bb30b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ad07bc5-e4b6-4446-8362-d15acb4e7674",
              "title": "Check type.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check entity VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "97d4d5cd-87a7-4cdd-954e-5b24363c7f92",
                  "parentUUID": "4ad07bc5-e4b6-4446-8362-d15acb4e7674",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, END)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "c59eac4f-cb3d-4a0a-ac22-976f9ff59486",
                  "parentUUID": "4ad07bc5-e4b6-4446-8362-d15acb4e7674",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c59eac4f-cb3d-4a0a-ac22-976f9ff59486"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9821d3c5-4cf5-4e44-b018-d98d53455fdc",
              "title": "Check function.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "df896c9d-5ee5-411f-8127-708192dd0e93",
                  "parentUUID": "9821d3c5-4cf5-4e44-b018-d98d53455fdc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(minutes : integer := 0; seconds : integer := 0)\",\n    return: \"return integer\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "a489f5b5-5de6-434d-933b-31c206486f12",
                  "parentUUID": "9821d3c5-4cf5-4e44-b018-d98d53455fdc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a489f5b5-5de6-434d-933b-31c206486f12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f25a9c08-b146-40e2-b8a1-8aae5af91f31",
              "title": "Check process.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check process.\"",
                  "fullTitle": "Check entity VHDL Check process. \"before all\" hook in \"Check process.\"",
                  "timedOut": false,
                  "duration": 130,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "18bf136e-1ac9-400b-8a5a-2596b6232282",
                  "parentUUID": "f25a9c08-b146-40e2-b8a1-8aae5af91f31",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check without sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check without sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "76da4436-3117-4786-b3ce-e1000f6bcd3f",
                  "parentUUID": "f25a9c08-b146-40e2-b8a1-8aae5af91f31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check with sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"clk0, reset\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "77fc4769-da5b-467f-95ee-02526e1e28b3",
                  "parentUUID": "f25a9c08-b146-40e2-b8a1-8aae5af91f31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check process. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "84da8a9d-f4c0-4d99-85a0-3ac131f9d42e",
                  "parentUUID": "f25a9c08-b146-40e2-b8a1-8aae5af91f31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76da4436-3117-4786-b3ce-e1000f6bcd3f",
                "77fc4769-da5b-467f-95ee-02526e1e28b3",
                "84da8a9d-f4c0-4d99-85a0-3ac131f9d42e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c9e70711-1ae3-48a0-8267-41b1d9b740e5",
              "title": "Check instantiation.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity VHDL Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "66129d23-03c9-4e09-bc70-e467c696e7fb",
                  "parentUUID": "c9e70711-1ae3-48a0-8267-41b1d9b740e5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"uut_0\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "efa30b32-3955-424d-9f97-6b63cef720d9",
                  "parentUUID": "c9e70711-1ae3-48a0-8267-41b1d9b740e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "ae12c958-b8f0-4a92-9581-385798986951",
                  "parentUUID": "c9e70711-1ae3-48a0-8267-41b1d9b740e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "efa30b32-3955-424d-9f97-6b63cef720d9",
                "ae12c958-b8f0-4a92-9581-385798986951"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4440265d-af74-40b9-a44f-73b56e8c84b5",
          "title": "Check package VHDL",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
          "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "679feea9-a5df-42d8-ac59-f11d38f69008",
              "title": "Check pacakge.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check pacakge.\"",
                  "fullTitle": "Check package VHDL Check pacakge. \"before all\" hook in \"Check pacakge.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "63e05793-449d-45f1-aceb-a40a571ac755",
                  "parentUUID": "679feea9-a5df-42d8-ac59-f11d38f69008",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package VHDL Check pacakge. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_package_name');",
                  "err": {},
                  "uuid": "52cf63cd-7055-4ac2-a926-7c02c4c6cf3f",
                  "parentUUID": "679feea9-a5df-42d8-ac59-f11d38f69008",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check package VHDL Check pacakge. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common_1.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "6adff3c9-0b66-490e-b07e-3a4b63e96391",
                  "parentUUID": "679feea9-a5df-42d8-ac59-f11d38f69008",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52cf63cd-7055-4ac2-a926-7c02c4c6cf3f",
                "6adff3c9-0b66-490e-b07e-3a4b63e96391"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "277e7725-3811-4b12-ae47-26024695d121",
              "title": "Check signal.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check package VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "eea1b981-7f7c-484f-88a2-0d6f59e01e42",
                  "parentUUID": "277e7725-3811-4b12-ae47-26024695d121",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "c6ff7139-945c-4b09-956c-53e569fea5b3",
                  "parentUUID": "277e7725-3811-4b12-ae47-26024695d121",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "4cedc50f-7e28-43c0-8782-84be5183236c",
                  "parentUUID": "277e7725-3811-4b12-ae47-26024695d121",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "9453162c-01a9-4192-bab3-7790dad4d851",
                  "parentUUID": "277e7725-3811-4b12-ae47-26024695d121",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6ff7139-945c-4b09-956c-53e569fea5b3",
                "4cedc50f-7e28-43c0-8782-84be5183236c",
                "9453162c-01a9-4192-bab3-7790dad4d851"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5a3575c-f508-4038-8de1-5f66f28c0dd2",
              "title": "Check constant.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "a6dfa486-50a1-46d0-a92a-5bc7e97e739b",
                  "parentUUID": "f5a3575c-f508-4038-8de1-5f66f28c0dd2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "10d5f1c9-7940-4b4f-9dcd-433c2c7c0646",
                  "parentUUID": "f5a3575c-f508-4038-8de1-5f66f28c0dd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "db398d01-8723-44fa-a8c2-e497b2f770cd",
                  "parentUUID": "f5a3575c-f508-4038-8de1-5f66f28c0dd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "37d640d9-3fd5-4ed4-bb23-7950a814013a",
                  "parentUUID": "f5a3575c-f508-4038-8de1-5f66f28c0dd2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10d5f1c9-7940-4b4f-9dcd-433c2c7c0646",
                "db398d01-8723-44fa-a8c2-e497b2f770cd",
                "37d640d9-3fd5-4ed4-bb23-7950a814013a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a75f0a4e-4e3d-4e6c-ba99-51dca0f909b0",
              "title": "Check type.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "d348c980-d94d-4fa1-9682-cbafb9056698",
                  "parentUUID": "a75f0a4e-4e3d-4e6c-ba99-51dca0f909b0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, ENDS)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "0b4ecaaf-a789-4a8a-8634-c9f4c748b470",
                  "parentUUID": "a75f0a4e-4e3d-4e6c-ba99-51dca0f909b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b4ecaaf-a789-4a8a-8634-c9f4c748b470"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8c4f46c-8217-491f-9c03-986416d669f2",
              "title": "Check function.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "2054994f-0d92-4723-808f-f00dfc240364",
                  "parentUUID": "a8c4f46c-8217-491f-9c03-986416d669f2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(signal minutes: in integer; signal seconds: out integer;)\",\n    return: \"\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "062f7d66-f7d7-420b-a140-c954844f0eb0",
                  "parentUUID": "a8c4f46c-8217-491f-9c03-986416d669f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "062f7d66-f7d7-420b-a140-c954844f0eb0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "238eab10-a691-4333-a3ec-3aeecdf2ebf6",
          "title": "Test local process",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\process\\process.spec.ts",
          "file": "\\tests\\process\\process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check exec successful",
              "fullTitle": "Test local process Check exec successful",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'echo \"hello world!\"';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: 'hello world!',\n    stderr: '',\n    return_value: 0,\n    successful: true\n};\nconst os = process.platform;\nif (os === 'win32') {\n    expected_result.stdout = \"\\\"hello world!\\\"\";\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "00f2915c-ca99-4011-bdbd-daaefd4e7b82",
              "parentUUID": "238eab10-a691-4333-a3ec-3aeecdf2ebf6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check exec not successful",
              "fullTitle": "Test local process Check exec not successful",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'asdf';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: '',\n    stderr: '/bin/sh: 1: asdf: not found',\n    return_value: -1,\n    successful: false\n};\nconst os = process.platform;\nif (os === 'darwin' || os === 'win32') {\n    expected_result.stderr = '';\n    result.stderr = '';\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "a8c5f338-eb1e-47a5-995a-38b0c35a155b",
              "parentUUID": "238eab10-a691-4333-a3ec-3aeecdf2ebf6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00f2915c-ca99-4011-bdbd-daaefd4e7b82",
            "a8c5f338-eb1e-47a5-995a-38b0c35a155b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "152a7fec-9a6d-4451-ac4f-49169c49e541",
          "title": "Test utils",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\process\\process.spec.ts",
          "file": "\\tests\\process\\process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check create temporal file",
              "fullTitle": "Test utils Check create temporal file",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expected_text = \"sample of text\";\nconst tmp_file_path = await (0, utils_1.create_temp_file)(expected_text);\nconst fs = require('fs');\nconst current_text = fs.readFileSync(tmp_file_path);\n(0, assert_1.equal)(current_text, expected_text);",
              "err": {},
              "uuid": "0696cae2-171c-4077-9dd3-973b31da62e7",
              "parentUUID": "152a7fec-9a6d-4451-ac4f-49169c49e541",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0696cae2-171c-4077-9dd3-973b31da62e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "32894711-eaf4-47ba-9f68-e0db95e23bfb",
          "title": "Test Python utils",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\process\\python.spec.ts",
          "file": "\\tests\\process\\python.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check get_python3_path in system path",
              "fullTitle": "Test Python utils Check get_python3_path in system path",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "6fedaf4d-b003-45e9-8d37-8878960a1d7d",
              "parentUUID": "32894711-eaf4-47ba-9f68-e0db95e23bfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in custom path",
              "fullTitle": "Test Python utils Check get_python3_path in custom path",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst opt = {\n    path: \"/usr/bin/python3\"\n};\nconst system_os = (0, utils_1.get_os)();\nif (system_os === common.OS.MAC) {\n    opt.path = \"/usr/local/opt/python@3.9/bin/python3.9\";\n}\nelse if (system_os === common.OS.WINDOWS) {\n    opt.path = \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.9.13\\\\x64\\\\python3.exe\";\n}\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "b504f54e-75d8-4040-918e-78b355c28772",
              "parentUUID": "32894711-eaf4-47ba-9f68-e0db95e23bfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in a bad custom path ",
              "fullTitle": "Test Python utils Check get_python3_path in a bad custom path ",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"/usr/bin/python999\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "affdb15e-ac4e-4154-92bd-ef9216196ba5",
              "parentUUID": "32894711-eaf4-47ba-9f68-e0db95e23bfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package and true",
              "fullTitle": "Test Python utils Check python3 package and true",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = 'time';\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "e8e0a71a-23c2-4477-915d-fccf0a97cabe",
              "parentUUID": "32894711-eaf4-47ba-9f68-e0db95e23bfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package and false",
              "fullTitle": "Test Python utils Check python3 package and false",
              "timedOut": false,
              "duration": 201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = 'time1234';\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "2db6582a-f117-4a28-b1e2-246f46c26b4a",
              "parentUUID": "32894711-eaf4-47ba-9f68-e0db95e23bfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and true",
              "fullTitle": "Test Python utils Check python3 package list and true",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "9ea3a436-4a87-4839-ad86-3503fe5737f9",
              "parentUUID": "32894711-eaf4-47ba-9f68-e0db95e23bfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and false",
              "fullTitle": "Test Python utils Check python3 package list and false",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os123'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "ab98c599-7fb6-4cbf-a7fb-edd3efe1a558",
              "parentUUID": "32894711-eaf4-47ba-9f68-e0db95e23bfb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fedaf4d-b003-45e9-8d37-8878960a1d7d",
            "b504f54e-75d8-4040-918e-78b355c28772",
            "affdb15e-ac4e-4154-92bd-ef9216196ba5",
            "e8e0a71a-23c2-4477-915d-fccf0a97cabe",
            "2db6582a-f117-4a28-b1e2-246f46c26b4a",
            "9ea3a436-4a87-4839-ad86-3503fe5737f9",
            "ab98c599-7fb6-4cbf-a7fb-edd3efe1a558"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 963,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6a06ed58-f91f-4566-a1d5-14c22af02e50",
          "title": "Check template VHDL element",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\template\\template.spec.ts",
          "file": "\\tests\\template\\template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template VHDL element Check cocotb",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "a49bdcfe-7d51-4d1b-94da-3be0d9ea61eb",
              "parentUUID": "6a06ed58-f91f-4566-a1d5-14c22af02e50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template VHDL element Check testbench_normal",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "cb713136-f83d-4f0d-a614-d53401c2d217",
              "parentUUID": "6a06ed58-f91f-4566-a1d5-14c22af02e50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template VHDL element Check testbench_vunit",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "c4389cff-f172-460f-9b51-0cf594b24038",
              "parentUUID": "6a06ed58-f91f-4566-a1d5-14c22af02e50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_component",
              "fullTitle": "Check template VHDL element Check hdl_element_component",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "e7d24d85-4614-4def-bf4a-ca570c8cafc0",
              "parentUUID": "6a06ed58-f91f-4566-a1d5-14c22af02e50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance_vhdl_new",
              "fullTitle": "Check template VHDL element Check hdl_element_instance_vhdl_new",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "ca0250e9-807e-42cd-9010-a3e7fb2fcab3",
              "parentUUID": "6a06ed58-f91f-4566-a1d5-14c22af02e50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance",
              "fullTitle": "Check template VHDL element Check hdl_element_instance",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "06df806b-c0d6-453d-a031-216e024eacd1",
              "parentUUID": "6a06ed58-f91f-4566-a1d5-14c22af02e50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template VHDL element Check hdl_element_signal",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "c4f9c0f6-32a9-4a90-b7fb-82008e06ca3b",
              "parentUUID": "6a06ed58-f91f-4566-a1d5-14c22af02e50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_component",
              "fullTitle": "Check template VHDL element Check hdl_element_mix_component",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "ff5ae4b9-81ae-4e0c-bbb3-892cb49818bc",
              "parentUUID": "6a06ed58-f91f-4566-a1d5-14c22af02e50",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a49bdcfe-7d51-4d1b-94da-3be0d9ea61eb",
            "cb713136-f83d-4f0d-a614-d53401c2d217",
            "c4389cff-f172-460f-9b51-0cf594b24038",
            "e7d24d85-4614-4def-bf4a-ca570c8cafc0",
            "ca0250e9-807e-42cd-9010-a3e7fb2fcab3",
            "06df806b-c0d6-453d-a031-216e024eacd1",
            "c4f9c0f6-32a9-4a90-b7fb-82008e06ca3b",
            "ff5ae4b9-81ae-4e0c-bbb3-892cb49818bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 229,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ab0457c4-35b1-4d33-a89d-7a6bc00be767",
          "title": "Check get language",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\hdl_utils.spec.ts",
          "file": "\\tests\\utils\\hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From path Verilog",
              "fullTitle": "Check get language From path Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.v';\nconst lang_expected = general_1.HDL_LANG.VERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "824e11d4-cbc6-469a-8b72-ecaf0af17dd6",
              "parentUUID": "ab0457c4-35b1-4d33-a89d-7a6bc00be767",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path SystemVerilog",
              "fullTitle": "Check get language From path SystemVerilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.sv';\nconst lang_expected = general_1.HDL_LANG.SYSTEMVERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "4c63986e-5fd6-4cce-bab4-7564934b638b",
              "parentUUID": "ab0457c4-35b1-4d33-a89d-7a6bc00be767",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path VHDL",
              "fullTitle": "Check get language From path VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.vhd';\nconst lang_expected = general_1.HDL_LANG.VHDL;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "a25db45c-0ae5-4b6e-98bb-c90d66a828ed",
              "parentUUID": "ab0457c4-35b1-4d33-a89d-7a6bc00be767",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path NONE",
              "fullTitle": "Check get language From path NONE",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.txt';\nconst lang_expected = general_1.HDL_LANG.NONE;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "cc61c49b-f870-4cf5-b2fa-1e60197ca76c",
              "parentUUID": "ab0457c4-35b1-4d33-a89d-7a6bc00be767",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "824e11d4-cbc6-469a-8b72-ecaf0af17dd6",
            "4c63986e-5fd6-4cce-bab4-7564934b638b",
            "a25db45c-0ae5-4b6e-98bb-c90d66a828ed",
            "cc61c49b-f870-4cf5-b2fa-1e60197ca76c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6ac6312-33fb-4f9c-a731-2d2ba306bab6",
          "title": "Check remove comments",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\hdl_utils.spec.ts",
          "file": "\\tests\\utils\\hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove comments VHDL",
              "fullTitle": "Check remove comments Remove comments VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n-- One line comment\n-- One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n/           \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_vhdl(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "c2325a5e-2eb5-4242-a800-7b543ccd8513",
              "parentUUID": "a6ac6312-33fb-4f9c-a731-2d2ba306bab6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove comments Verilog",
              "fullTitle": "Check remove comments Remove comments Verilog",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n// One line comment\n// One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n            \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_verilog(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "f281b323-d7eb-446b-b10e-dba225ef5937",
              "parentUUID": "a6ac6312-33fb-4f9c-a731-2d2ba306bab6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c2325a5e-2eb5-4242-a800-7b543ccd8513",
            "f281b323-d7eb-446b-b10e-dba225ef5937"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9dad6a9b-d935-4abe-a247-4600c3c64565",
          "title": "Check get top level with regex",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\hdl_utils.spec.ts",
          "file": "\\tests\\utils\\hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From VHDL code",
              "fullTitle": "Check get top level with regex From VHDL code",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(`Get top level VHDL`, async function () {\n    const code_dummy = `\n    library ieee;\n    use ieee.std_logic_1164.all;\n    use ieee.numeric_std.all;\n    entity test_entity_name is\n    generic (\n        a : integer;\n        b : unsigned;\n        c : signed;\n        d : std_logic;\n        e : std_logic_vector;\n        f : std_logic_vector(5 downto 0)\n      );\n    port(\n      g : in std_logic;\n      h : out std_logic;\n      i : inout std_logic\n    );\n    end test_entity_name;  \n    architecture e_arch of test_entity_name is\n    begin \n    end e_arch;\n    `;\n    const expected = 'test_entity_name';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n    (0, assert_1.equal)(current, expected);\n});\nit(`Get top level Verilog`, async function () {\n    const code_dummy = `\n    module test_entity_name2 \n        #(\n            parameter a=8,\n            parameter b=9,\n            parameter c=10, d=11\n        )\n        (\n            input e,\n            output f,\n            input reg g,\n            input wire h,\n            input reg [7:0] i, j,\n            input wire [9:0] k,\n            output wire [9:0] l\n        );  \n    \n        function [7:0] sum;  \n            input [7:0] a, b;  \n            begin  \n                sum = a + b;  \n            end  \n        endfunction\n    \n        wire m;\n        wire n, p;\n        reg [1:0] q;\n    \n        localparam r = 2;\n    \n        always @(posedge a) begin : label_0\n        end\n    \n        always_comb begin\n        end\n    \n        always_ff begin : label_1\n        end\n    \n        always_latch begin\n        end\n    \n        test_entity_name \n        #(\n          .a(a ),\n          .b(b ),\n          .c(c ),\n          .d (d )\n        )\n        test_entity_name_dut (\n          .e (e ),\n          .f (f ),\n          .g (g ),\n          .h (h ),\n          .i (i ),\n          .j (j ),\n          .k (k ),\n          .l  ( l)\n        );\n      \n    endmodule\n    `;\n    const expected = 'test_entity_name2';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n    (0, assert_1.equal)(current, expected);\n});",
              "err": {},
              "uuid": "64806ebf-9acc-4be9-ba05-f4a54ec42c75",
              "parentUUID": "9dad6a9b-d935-4abe-a247-4600c3c64565",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64806ebf-9acc-4be9-ba05-f4a54ec42c75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1077c4a-f311-4957-bd89-08678fc69e75",
          "title": "Check hover VHDL",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\number.spec.ts",
          "file": "\\tests\\utils\\number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover VHDL Binary unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"0011\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "0aafd1c1-0d7b-4039-8a76-0460e2ae023e",
              "parentUUID": "f1077c4a-f311-4957-bd89-08678fc69e75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover VHDL Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1101\"';\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "1beb3cce-e6c9-42c9-86b2-ba30b160f771",
              "parentUUID": "f1077c4a-f311-4957-bd89-08678fc69e75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1_10_0\"';\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "fbd4049a-847e-4921-9bee-4fa83aadd12f",
              "parentUUID": "f1077c4a-f311-4957-bd89-08678fc69e75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"0aB0\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "d6ab1ac7-c9d7-4b58-b2a7-bc5bdeda93dd",
              "parentUUID": "f1077c4a-f311-4957-bd89-08678fc69e75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"aaB0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "8fbab13c-96fd-4b8f-8610-f3cadb7b1373",
              "parentUUID": "f1077c4a-f311-4957-bd89-08678fc69e75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"a_a_b0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "83329938-30ff-4760-8fb5-5ef416bc2e04",
              "parentUUID": "f1077c4a-f311-4957-bd89-08678fc69e75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover VHDL Octal unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"0175\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "166a9dc9-8ce1-4f37-9620-e7376047f64e",
              "parentUUID": "f1077c4a-f311-4957-bd89-08678fc69e75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover VHDL Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'O\"232\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "6ae25c88-a823-4e9e-9551-841d998c6cde",
              "parentUUID": "f1077c4a-f311-4957-bd89-08678fc69e75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"2_3_2\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "24b2ad82-ceea-4e30-b248-ca174274d732",
              "parentUUID": "f1077c4a-f311-4957-bd89-08678fc69e75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0aafd1c1-0d7b-4039-8a76-0460e2ae023e",
            "1beb3cce-e6c9-42c9-86b2-ba30b160f771",
            "fbd4049a-847e-4921-9bee-4fa83aadd12f",
            "d6ab1ac7-c9d7-4b58-b2a7-bc5bdeda93dd",
            "8fbab13c-96fd-4b8f-8610-f3cadb7b1373",
            "83329938-30ff-4760-8fb5-5ef416bc2e04",
            "166a9dc9-8ce1-4f37-9620-e7376047f64e",
            "6ae25c88-a823-4e9e-9551-841d998c6cde",
            "24b2ad82-ceea-4e30-b248-ca174274d732"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
          "title": "Check hover Verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\number.spec.ts",
          "file": "\\tests\\utils\\number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover Verilog Binary unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b0011'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "3b9d0977-e2e2-4602-889b-bc5b2a55d684",
              "parentUUID": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover Verilog Binary unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1101'\";\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "e8788c13-5c93-4370-950b-ef9cce634d27",
              "parentUUID": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1_10_0'\";\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "b66b8224-859b-4226-bd4d-e729f4b7a2b1",
              "parentUUID": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'h0aB0'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "b03aade3-5e5c-4ef3-902b-6c4906f5c480",
              "parentUUID": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'haaB0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "9f2fad16-1bb7-42aa-be62-14516cfc0d2b",
              "parentUUID": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'ha_a_b0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "9ed51f9d-d756-49fb-ade1-8cb661dfbf47",
              "parentUUID": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover Verilog Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o0175'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "5b08fbff-8a87-4398-9c20-fb897817f220",
              "parentUUID": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover Verilog Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o232'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "5ae4b58b-5cba-4133-99b0-529063493819",
              "parentUUID": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o2_3_2'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "5bc64837-f9a3-4c13-b67c-f832fbe86a75",
              "parentUUID": "9875e300-db38-456c-b6c4-0cbc0c2adb28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3b9d0977-e2e2-4602-889b-bc5b2a55d684",
            "e8788c13-5c93-4370-950b-ef9cce634d27",
            "b66b8224-859b-4226-bd4d-e729f4b7a2b1",
            "b03aade3-5e5c-4ef3-902b-6c4906f5c480",
            "9f2fad16-1bb7-42aa-be62-14516cfc0d2b",
            "9ed51f9d-d756-49fb-ade1-8cb661dfbf47",
            "5b08fbff-8a87-4398-9c20-fb897817f220",
            "5ae4b58b-5cba-4133-99b0-529063493819",
            "5bc64837-f9a3-4c13-b67c-f832fbe86a75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "3a3300e4-392c-4a7f-914c-e90f249b042f",
        "7563fb81-d980-4517-a787-c2247e9ecc16"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default"
      },
      "version": "6.2.0"
    }
  }
}