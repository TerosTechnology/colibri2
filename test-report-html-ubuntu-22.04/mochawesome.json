{
  "stats": {
    "suites": 55,
    "tests": 186,
    "passes": 182,
    "pending": 4,
    "failures": 0,
    "start": "2022-07-25T21:09:36.444Z",
    "end": "2022-07-25T21:09:47.260Z",
    "duration": 10816,
    "testsRegistered": 188,
    "passPercent": 98.91304347826086,
    "pendingPercent": 2.127659574468085,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "6188a8d2-14eb-4828-a406-0247613e39a7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Get top level VHDL",
          "fullTitle": "Get top level VHDL",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity test_entity_name is\ngeneric (\n    a : integer;\n    b : unsigned;\n    c : signed;\n    d : std_logic;\n    e : std_logic_vector;\n    f : std_logic_vector(5 downto 0)\n  );\nport(\n  g : in std_logic;\n  h : out std_logic;\n  i : inout std_logic\n);\nend test_entity_name;  \narchitecture e_arch of test_entity_name is\nbegin \nend e_arch;\n`;\nconst expected = 'test_entity_name';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "fea0ef8d-5f20-4730-9e92-4e7336f42fb9",
          "parentUUID": "6188a8d2-14eb-4828-a406-0247613e39a7",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "Get top level Verilog",
          "fullTitle": "Get top level Verilog",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nmodule test_entity_name2 \n    #(\n        parameter a=8,\n        parameter b=9,\n        parameter c=10, d=11\n    )\n    (\n        input e,\n        output f,\n        input reg g,\n        input wire h,\n        input reg [7:0] i, j,\n        input wire [9:0] k,\n        output wire [9:0] l\n    );  \n\n    function [7:0] sum;  \n        input [7:0] a, b;  \n        begin  \n            sum = a + b;  \n        end  \n    endfunction\n\n    wire m;\n    wire n, p;\n    reg [1:0] q;\n\n    localparam r = 2;\n\n    always @(posedge a) begin : label_0\n    end\n\n    always_comb begin\n    end\n\n    always_ff begin : label_1\n    end\n\n    always_latch begin\n    end\n\n    test_entity_name \n    #(\n      .a(a ),\n      .b(b ),\n      .c(c ),\n      .d (d )\n    )\n    test_entity_name_dut (\n      .e (e ),\n      .f (f ),\n      .g (g ),\n      .h (h ),\n      .i (i ),\n      .j (j ),\n      .k (k ),\n      .l  ( l)\n    );\n  \nendmodule\n`;\nconst expected = 'test_entity_name2';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "896c7974-d5f9-4b4e-98ae-4590eb683583",
          "parentUUID": "6188a8d2-14eb-4828-a406-0247613e39a7",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "8e29d3ce-28b2-42e0-b347-c5deda7bd9a4",
          "title": "Check diagram generator",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/diagram.spec.ts",
          "file": "/tests/documenter/diagram.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "With ports and generics and color",
              "fullTitle": "Check diagram generator With ports and generics and color",
              "timedOut": false,
              "duration": 262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "015ec3e5-bfb8-4a32-89a6-39df4784dbaf",
              "parentUUID": "8e29d3ce-28b2-42e0-b347-c5deda7bd9a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only ports and color",
              "fullTitle": "Check diagram generator Only ports and color",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "3f4437c8-0352-456f-aa82-a28647106b30",
              "parentUUID": "8e29d3ce-28b2-42e0-b347-c5deda7bd9a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only generics and color",
              "fullTitle": "Check diagram generator Only generics and color",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "bb7ebccd-bf24-4879-b746-cb4816757df0",
              "parentUUID": "8e29d3ce-28b2-42e0-b347-c5deda7bd9a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty and color",
              "fullTitle": "Check diagram generator Empty and color",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 3;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "70e976d8-6c55-415e-979b-34eb3f2c769f",
              "parentUUID": "8e29d3ce-28b2-42e0-b347-c5deda7bd9a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With ports and generics and black and white",
              "fullTitle": "Check diagram generator With ports and generics and black and white",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 4;\nconst OPT = {\n    blackandwhite: true\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "88277bf6-b0c5-46d4-b93e-9ba6eb0922f5",
              "parentUUID": "8e29d3ce-28b2-42e0-b347-c5deda7bd9a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "015ec3e5-bfb8-4a32-89a6-39df4784dbaf",
            "3f4437c8-0352-456f-aa82-a28647106b30",
            "bb7ebccd-bf24-4879-b746-cb4816757df0",
            "70e976d8-6c55-415e-979b-34eb3f2c769f",
            "88277bf6-b0c5-46d4-b93e-9ba6eb0922f5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 290,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e9cc0f14-6cc5-411f-abff-71ae66217b98",
          "title": "Check documenter creator with html",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with html Entity VHDL",
              "timedOut": false,
              "duration": 755,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "ad4867a4-7d8e-482b-896f-396b1799e1af",
              "parentUUID": "e9cc0f14-6cc5-411f-abff-71ae66217b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with html Package VHDL",
              "timedOut": false,
              "duration": 378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "c5434403-9de3-4bb5-af14-a2a4345a8081",
              "parentUUID": "e9cc0f14-6cc5-411f-abff-71ae66217b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with html Module Verilog",
              "timedOut": false,
              "duration": 966,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "b3d09e8a-8574-4381-b54f-9a734f9942d1",
              "parentUUID": "e9cc0f14-6cc5-411f-abff-71ae66217b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with html Package SystemVerilog",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "d46a462c-f909-45fb-8cac-4f61346455b3",
              "parentUUID": "e9cc0f14-6cc5-411f-abff-71ae66217b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with html Interface SystemVerilog",
              "timedOut": false,
              "duration": 269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "b3aa51f0-a72d-4972-8356-797d0bbf4b03",
              "parentUUID": "e9cc0f14-6cc5-411f-abff-71ae66217b98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad4867a4-7d8e-482b-896f-396b1799e1af",
            "c5434403-9de3-4bb5-af14-a2a4345a8081",
            "b3d09e8a-8574-4381-b54f-9a734f9942d1",
            "d46a462c-f909-45fb-8cac-4f61346455b3",
            "b3aa51f0-a72d-4972-8356-797d0bbf4b03"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2652,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c2e720f3-ef97-4ad4-a3c5-bcd23c0145f9",
          "title": "Check documenter creator with markdown",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with markdown Entity VHDL",
              "timedOut": false,
              "duration": 270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "41c76e81-db34-4cdb-bf96-952410a528a8",
              "parentUUID": "c2e720f3-ef97-4ad4-a3c5-bcd23c0145f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with markdown Package VHDL",
              "timedOut": false,
              "duration": 280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "848a1470-4c42-4623-bac1-9978da2d7b86",
              "parentUUID": "c2e720f3-ef97-4ad4-a3c5-bcd23c0145f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with markdown Module Verilog",
              "timedOut": false,
              "duration": 499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "452a8bd5-60da-4afd-ab87-10d184c8892d",
              "parentUUID": "c2e720f3-ef97-4ad4-a3c5-bcd23c0145f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Package SystemVerilog",
              "timedOut": false,
              "duration": 267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "5edfd6b9-3ec5-48f2-af44-42e44b170322",
              "parentUUID": "c2e720f3-ef97-4ad4-a3c5-bcd23c0145f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Interface SystemVerilog",
              "timedOut": false,
              "duration": 265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "0eb39cf6-d2f6-49ed-b6d6-ded6fbafd355",
              "parentUUID": "c2e720f3-ef97-4ad4-a3c5-bcd23c0145f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41c76e81-db34-4cdb-bf96-952410a528a8",
            "848a1470-4c42-4623-bac1-9978da2d7b86",
            "452a8bd5-60da-4afd-ab87-10d184c8892d",
            "5edfd6b9-3ec5-48f2-af44-42e44b170322",
            "0eb39cf6-d2f6-49ed-b6d6-ded6fbafd355"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1581,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "67bb1408-c888-41ba-add5-1a74b7a99c0f",
          "title": "Test Doxygen elements single line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "87de3884-96fb-4792-b377-ef33cb010b5d",
              "parentUUID": "67bb1408-c888-41ba-add5-1a74b7a99c0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "b77706e6-17fd-4abb-b319-60932ff1580b",
              "parentUUID": "67bb1408-c888-41ba-add5-1a74b7a99c0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "7c7a0ff0-4393-428d-9d19-fb66f1693349",
              "parentUUID": "67bb1408-c888-41ba-add5-1a74b7a99c0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "b3e06a31-c00f-4920-9940-dde4d5970aa5",
              "parentUUID": "67bb1408-c888-41ba-add5-1a74b7a99c0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "918559b0-5ce5-42ab-9d46-92c13d3703ea",
              "parentUUID": "67bb1408-c888-41ba-add5-1a74b7a99c0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "a7d5586a-8145-46e0-92ca-4c44961397fb",
              "parentUUID": "67bb1408-c888-41ba-add5-1a74b7a99c0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "3c856c2d-dde7-491a-b5b0-1460c2f025a5",
              "parentUUID": "67bb1408-c888-41ba-add5-1a74b7a99c0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "e1ee6c66-3f16-4d6d-b6e3-9aea9f44e911",
              "parentUUID": "67bb1408-c888-41ba-add5-1a74b7a99c0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87de3884-96fb-4792-b377-ef33cb010b5d",
            "b77706e6-17fd-4abb-b319-60932ff1580b",
            "7c7a0ff0-4393-428d-9d19-fb66f1693349",
            "b3e06a31-c00f-4920-9940-dde4d5970aa5",
            "918559b0-5ce5-42ab-9d46-92c13d3703ea",
            "a7d5586a-8145-46e0-92ca-4c44961397fb",
            "3c856c2d-dde7-491a-b5b0-1460c2f025a5",
            "e1ee6c66-3f16-4d6d-b6e3-9aea9f44e911"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "51ce044c-c460-43a9-8b0c-c86e890c04ce",
          "title": "Test Doxygen elements multi line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "235dbe53-43a3-4bb7-97d0-b3446f0d37e5",
              "parentUUID": "51ce044c-c460-43a9-8b0c-c86e890c04ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "daf13c63-610d-4a41-b84d-946f6a478dc8",
              "parentUUID": "51ce044c-c460-43a9-8b0c-c86e890c04ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "084f11ed-bf88-4960-a1e1-79c752454aa3",
              "parentUUID": "51ce044c-c460-43a9-8b0c-c86e890c04ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "1c65bda9-0abb-4b61-a948-e77f0ccbc442",
              "parentUUID": "51ce044c-c460-43a9-8b0c-c86e890c04ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "bd9ccd01-75cd-4462-9bdb-1f742bd9aa8b",
              "parentUUID": "51ce044c-c460-43a9-8b0c-c86e890c04ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "cae85198-588e-4305-9281-fe3368ce14a5",
              "parentUUID": "51ce044c-c460-43a9-8b0c-c86e890c04ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "e3c3d036-3227-40e6-bb01-c52e4ab2afed",
              "parentUUID": "51ce044c-c460-43a9-8b0c-c86e890c04ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "d90eb7c8-8824-49d9-8aaa-5d1ceebb0655",
              "parentUUID": "51ce044c-c460-43a9-8b0c-c86e890c04ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "235dbe53-43a3-4bb7-97d0-b3446f0d37e5",
            "daf13c63-610d-4a41-b84d-946f6a478dc8",
            "084f11ed-bf88-4960-a1e1-79c752454aa3",
            "1c65bda9-0abb-4b61-a948-e77f0ccbc442",
            "bd9ccd01-75cd-4462-9bdb-1f742bd9aa8b",
            "cae85198-588e-4305-9281-fe3368ce14a5",
            "e3c3d036-3227-40e6-bb01-c52e4ab2afed",
            "d90eb7c8-8824-49d9-8aaa-5d1ceebb0655"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
          "title": "Check sections creator with html",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with html Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "45cb6ea6-32a1-4686-9b1c-c648365917f3",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with html Input section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "6911e438-9096-4c3c-ba50-56d7cdad8f49",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with html Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "d2eb9012-56bc-4c65-adb5-d86c2f37a86a",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with html Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, true);",
              "err": {},
              "uuid": "76e0a388-2b6b-4c39-919d-4217d724ae31",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with html Custom begin section",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "112a1722-7915-43e0-869d-ac94fda18356",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with html Custom end section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "d75d40c1-c6c6-44cc-afa6-2de9f956930a",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with html Description section",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (configuration.output_type === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "701662ed-db80-457f-819f-d354b543dde0",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with html Port section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "f1f18d9a-710c-4201-a585-0957cadfa7f5",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with html Signal-constant section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "8d906934-3005-4e14-8bb8-70896943cda1",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with html Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "64d865ca-c137-4b29-864f-cf2046916ce6",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with html Function section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "8963876f-8190-45d6-9e2c-5c5e301505ec",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with html Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "a4732c9a-2495-4a2a-92c3-568787afff4f",
              "parentUUID": "992af8ab-f9a4-4c12-9c39-e67499fa45be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45cb6ea6-32a1-4686-9b1c-c648365917f3",
            "6911e438-9096-4c3c-ba50-56d7cdad8f49",
            "d2eb9012-56bc-4c65-adb5-d86c2f37a86a",
            "112a1722-7915-43e0-869d-ac94fda18356",
            "d75d40c1-c6c6-44cc-afa6-2de9f956930a",
            "701662ed-db80-457f-819f-d354b543dde0",
            "f1f18d9a-710c-4201-a585-0957cadfa7f5",
            "8d906934-3005-4e14-8bb8-70896943cda1",
            "64d865ca-c137-4b29-864f-cf2046916ce6",
            "8963876f-8190-45d6-9e2c-5c5e301505ec",
            "a4732c9a-2495-4a2a-92c3-568787afff4f"
          ],
          "failures": [],
          "pending": [
            "76e0a388-2b6b-4c39-919d-4217d724ae31"
          ],
          "skipped": [],
          "duration": 127,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "21c0d629-0910-4b01-8c27-f94fb6039936",
          "title": "Check sections creator with markdown",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with markdown Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "6fc7a095-f05b-4024-b707-d5ec838f75af",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with markdown Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "86f44d9e-dce5-4c00-97ba-ba3166e28cf8",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with markdown Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "1625f25e-15c1-4ce3-be8f-1eb9e9d3249e",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with markdown Diagram section",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, true);",
              "err": {},
              "uuid": "37bca265-e6bd-4092-a6d4-9be1c05ac72f",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with markdown Custom begin section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "351c2418-6448-4ae9-a539-be15dfca5258",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with markdown Custom end section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "780184cc-8c32-4106-b75e-8f84f476c956",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with markdown Description section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "if (configuration.output_type === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "8d987419-176d-4332-b200-ac77800c777e",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with markdown Port section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "d6658954-a54d-4e0c-82d4-4bb6782dca79",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with markdown Signal-constant section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "c27d3ef7-dfb6-4ceb-9710-ee2ac1caeb6c",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with markdown Process section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "7bc496c2-e97f-468a-9aa6-0421e5ca4d13",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with markdown Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "54790766-a861-4b95-aab5-9531adb23214",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with markdown Instantiation section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "d3f3676f-b850-4291-b4f7-189fe56e3d11",
              "parentUUID": "21c0d629-0910-4b01-8c27-f94fb6039936",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fc7a095-f05b-4024-b707-d5ec838f75af",
            "86f44d9e-dce5-4c00-97ba-ba3166e28cf8",
            "1625f25e-15c1-4ce3-be8f-1eb9e9d3249e",
            "351c2418-6448-4ae9-a539-be15dfca5258",
            "780184cc-8c32-4106-b75e-8f84f476c956",
            "d6658954-a54d-4e0c-82d4-4bb6782dca79",
            "c27d3ef7-dfb6-4ceb-9710-ee2ac1caeb6c",
            "7bc496c2-e97f-468a-9aa6-0421e5ca4d13",
            "54790766-a861-4b95-aab5-9531adb23214",
            "d3f3676f-b850-4291-b4f7-189fe56e3d11"
          ],
          "failures": [],
          "pending": [
            "37bca265-e6bd-4092-a6d4-9be1c05ac72f",
            "8d987419-176d-4332-b200-ac77800c777e"
          ],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "80ecf5e0-873c-4d59-b30e-3fcc32351e97",
          "title": "Check standalone VHDL formatter",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check align comments true, indentation and keyworks lowercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments true, indentation and keyworks lowercase",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    remove_comments: false,\n    remove_asserts: false,\n    remove_report: false,\n    check_alias: false,\n    align_comments: true,\n    sign_align_settings: {\n        is_regional: true,\n        is_all: true,\n        mode: common.ALIGN_MODE.LOCAL,\n        keyWords: [\"FUNCTION\", \"IMPURE FUNCTION\", \"GENERIC\", \"PORT\", \"PROCEDURE\"]\n    },\n    keyword_case: common.LETTER_CASE.LOWERCASE,\n    type_name_case: common.LETTER_CASE.LOWERCASE,\n    indentation: \"    \",\n    new_line_settings: {\n        new_line_after: [\";\", \"then\"],\n        no_new_line_after: []\n    },\n    end_of_line: \"\\n\"\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "26458951-2815-4819-9de2-bbdf6edbc70e",
              "parentUUID": "80ecf5e0-873c-4d59-b30e-3fcc32351e97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check align comments false, indentation and keyworks uppercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments false, indentation and keyworks uppercase",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    remove_comments: false,\n    remove_asserts: false,\n    remove_report: false,\n    check_alias: false,\n    align_comments: false,\n    sign_align_settings: {\n        is_regional: true,\n        is_all: true,\n        mode: common.ALIGN_MODE.LOCAL,\n        keyWords: [\"FUNCTION\", \"IMPURE FUNCTION\", \"GENERIC\", \"PORT\", \"PROCEDURE\"]\n    },\n    keyword_case: common.LETTER_CASE.UPPERCASE,\n    type_name_case: common.LETTER_CASE.UPPERCASE,\n    indentation: \"      \",\n    new_line_settings: {\n        new_line_after: [\";\", \"then\"],\n        no_new_line_after: []\n    },\n    end_of_line: \"\\n\"\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "31e1f54b-84b8-4c71-8587-2dc49562d7fa",
              "parentUUID": "80ecf5e0-873c-4d59-b30e-3fcc32351e97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26458951-2815-4819-9de2-bbdf6edbc70e",
            "31e1f54b-84b8-4c71-8587-2dc49562d7fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b8e0b43-2ffa-494e-ac94-6b20c96e533b",
          "title": "Check istyle formatter",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check ansi with indent = 2",
              "fullTitle": "Check istyle formatter Check ansi with indent = 2",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "aec935b4-c86f-424b-a835-614a4ae33c8b",
              "parentUUID": "5b8e0b43-2ffa-494e-ac94-6b20c96e533b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 2",
              "fullTitle": "Check istyle formatter Check kr with indent = 2",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "b70dffb0-c7dd-4295-baa5-30480e7eb690",
              "parentUUID": "5b8e0b43-2ffa-494e-ac94-6b20c96e533b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 2",
              "fullTitle": "Check istyle formatter Check gnu with indent = 2",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "f17aa271-a6a9-4d9f-a107-35caa6795624",
              "parentUUID": "5b8e0b43-2ffa-494e-ac94-6b20c96e533b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check onlyindent with indent = 2",
              "fullTitle": "Check istyle formatter Check onlyindent with indent = 2",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "52d2a3dc-f715-417d-89ba-f2e9019b7521",
              "parentUUID": "5b8e0b43-2ffa-494e-ac94-6b20c96e533b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check ansi with indent = 6",
              "fullTitle": "Check istyle formatter Check ansi with indent = 6",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "0ddf9af1-0f82-4bf6-b068-b2c29c0beb33",
              "parentUUID": "5b8e0b43-2ffa-494e-ac94-6b20c96e533b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 6",
              "fullTitle": "Check istyle formatter Check kr with indent = 6",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "a4830044-d1c8-4e83-b248-1186e04eb3aa",
              "parentUUID": "5b8e0b43-2ffa-494e-ac94-6b20c96e533b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 6",
              "fullTitle": "Check istyle formatter Check gnu with indent = 6",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "bc3fc959-37db-4d10-8946-507c27097800",
              "parentUUID": "5b8e0b43-2ffa-494e-ac94-6b20c96e533b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check onlyindent with indent = 6",
              "fullTitle": "Check istyle formatter Check onlyindent with indent = 6",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "2a7ee09a-2442-4ff2-939b-e9992c95fc55",
              "parentUUID": "5b8e0b43-2ffa-494e-ac94-6b20c96e533b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aec935b4-c86f-424b-a835-614a4ae33c8b",
            "b70dffb0-c7dd-4295-baa5-30480e7eb690",
            "f17aa271-a6a9-4d9f-a107-35caa6795624",
            "52d2a3dc-f715-417d-89ba-f2e9019b7521",
            "0ddf9af1-0f82-4bf6-b068-b2c29c0beb33",
            "a4830044-d1c8-4e83-b248-1186e04eb3aa",
            "bc3fc959-37db-4d10-8946-507c27097800",
            "2a7ee09a-2442-4ff2-939b-e9992c95fc55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 93,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "44105c78-65e8-4791-8844-d10a6edd6f8e",
          "title": "Check s3sv formatter",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check config 0",
              "fullTitle": "Check s3sv formatter Check config 0",
              "timedOut": false,
              "duration": 131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    python3_path: \"\",\n    use_tabs: false,\n    indent_size: 2,\n    one_bind_per_line: true,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "43bc2d7a-104c-4a12-865d-b5f8bc317382",
              "parentUUID": "44105c78-65e8-4791-8844-d10a6edd6f8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 1",
              "fullTitle": "Check s3sv formatter Check config 1",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    python3_path: \"\",\n    use_tabs: true,\n    indent_size: 4,\n    one_bind_per_line: true,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "9e134377-0e47-4708-b4be-9f93da3fd8bf",
              "parentUUID": "44105c78-65e8-4791-8844-d10a6edd6f8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 2 and bad python3 path",
              "fullTitle": "Check s3sv formatter Check config 2 and bad python3 path",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst options = {\n    python3_path: \"asdf\",\n    use_tabs: true,\n    indent_size: 2,\n    one_bind_per_line: false,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "f3cb7bd9-b69d-4d6b-873d-b4a8972c6922",
              "parentUUID": "44105c78-65e8-4791-8844-d10a6edd6f8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43bc2d7a-104c-4a12-865d-b5f8bc317382",
            "9e134377-0e47-4708-b4be-9f93da3fd8bf",
            "f3cb7bd9-b69d-4d6b-873d-b4a8972c6922"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 404,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "388a9184-7741-4aa3-a4b2-61a7c4262e88",
          "title": "Check FSM for vhdl",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for vhdl Normal",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "a829d8f9-1d01-4408-aee1-4972517d6e21",
              "parentUUID": "388a9184-7741-4aa3-a4b2-61a7c4262e88",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a829d8f9-1d01-4408-aee1-4972517d6e21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 174,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d660e21d-6b5a-42c3-8489-a989ac31e8c3",
          "title": "Check FSM for verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for verilog Normal",
              "timedOut": false,
              "duration": 335,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "4f9797e1-2993-4747-9a85-de75ba011ea4",
              "parentUUID": "d660e21d-6b5a-42c3-8489-a989ac31e8c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f9797e1-2993-4747-9a85-de75ba011ea4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 335,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8fe2eff1-e18f-44dd-9007-367e0403cd41",
          "title": "Check entity Verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
          "file": "/tests/parser/parser_verilog_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b8e0df16-b0d1-48b9-b2ff-5eebc2981559",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity Verilog Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 193,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "c6df4f08-bd88-44ff-ae9f-49319ee24544",
                  "parentUUID": "b8e0df16-b0d1-48b9-b2ff-5eebc2981559",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity Verilog Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "f154aa3f-4b00-48f8-815d-1dc27a7abc2e",
                  "parentUUID": "b8e0df16-b0d1-48b9-b2ff-5eebc2981559",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity Verilog Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "2dba5d96-576b-47ef-be77-b089505185e9",
                  "parentUUID": "b8e0df16-b0d1-48b9-b2ff-5eebc2981559",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f154aa3f-4b00-48f8-815d-1dc27a7abc2e",
                "2dba5d96-576b-47ef-be77-b089505185e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08b75c16-02d8-45bb-a564-abf0dde61e2f",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity Verilog Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 225,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "f7361d0b-00c1-45a3-8ce2-1dfcad412858",
                  "parentUUID": "08b75c16-02d8-45bb-a564-abf0dde61e2f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"8\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "5f13a6d8-fb99-40c3-82e0-10126f15cf69",
                  "parentUUID": "08b75c16-02d8-45bb-a564-abf0dde61e2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity Verilog Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"9\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "d4302094-0c13-4f76-9224-4121fee4725b",
                  "parentUUID": "08b75c16-02d8-45bb-a564-abf0dde61e2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"10\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "93a44891-19a6-4c68-ac25-558d0fe6bb62",
                  "parentUUID": "08b75c16-02d8-45bb-a564-abf0dde61e2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"11\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "07ea5fc8-20d2-414b-a8d1-58fb8659def0",
                  "parentUUID": "08b75c16-02d8-45bb-a564-abf0dde61e2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f13a6d8-fb99-40c3-82e0-10126f15cf69",
                "d4302094-0c13-4f76-9224-4121fee4725b",
                "93a44891-19a6-4c68-ac25-558d0fe6bb62",
                "07ea5fc8-20d2-414b-a8d1-58fb8659def0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity Verilog Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 188,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "11a5c6ae-2877-47db-9ae7-4da25fc5ae16",
                  "parentUUID": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity Verilog Check port. Check input port",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "5476c27e-d975-41c8-be6a-3dba6ff7a7fc",
                  "parentUUID": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity Verilog Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "e5136e93-e4ca-49cb-981a-86b25ea205a4",
                  "parentUUID": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input reg port",
                  "fullTitle": "Check entity Verilog Check port. Check input reg port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"g\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "da251830-3904-4819-933a-95e1bf7139b2",
                  "parentUUID": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire port",
                  "fullTitle": "Check entity Verilog Check port. Check input wire port",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"h\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "209f563c-7f40-4fcd-a7f6-e324b46dc088",
                  "parentUUID": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 0",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"i\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "dea407e9-83f8-43bc-9281-bde65517cff2",
                  "parentUUID": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 1",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "this.skip();\nconst actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"j\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "8c4d89d2-4a51-4c11-b1ca-721573b67a3f",
                  "parentUUID": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire array",
                  "fullTitle": "Check entity Verilog Check port. Check input wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"k\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "d673ed99-d782-40b6-87e5-86ba0a753668",
                  "parentUUID": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output wire array",
                  "fullTitle": "Check entity Verilog Check port. Check output wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[7];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"l\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "b0044189-75cb-40db-8ece-510f4ec688e8",
                  "parentUUID": "9cc4c3bf-40fe-46cd-9345-3cbeac4cebb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5476c27e-d975-41c8-be6a-3dba6ff7a7fc",
                "e5136e93-e4ca-49cb-981a-86b25ea205a4",
                "da251830-3904-4819-933a-95e1bf7139b2",
                "209f563c-7f40-4fcd-a7f6-e324b46dc088",
                "dea407e9-83f8-43bc-9281-bde65517cff2",
                "d673ed99-d782-40b6-87e5-86ba0a753668",
                "b0044189-75cb-40db-8ece-510f4ec688e8"
              ],
              "failures": [],
              "pending": [
                "8c4d89d2-4a51-4c11-b1ca-721573b67a3f"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ee3721f-f049-4a86-8a65-329887391970",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity Verilog Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 214,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "510aa14c-8ac8-4d9e-afdf-bbf6c42a57d3",
                  "parentUUID": "9ee3721f-f049-4a86-8a65-329887391970",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "7d848e86-8553-4637-be51-e7d34808e0ff",
                  "parentUUID": "9ee3721f-f049-4a86-8a65-329887391970",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"n\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "005b1c5f-6abd-4abb-bce1-ade0d35dbf44",
                  "parentUUID": "9ee3721f-f049-4a86-8a65-329887391970",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"p\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "f75fac72-c96a-43fa-b143-c3f8e87396b3",
                  "parentUUID": "9ee3721f-f049-4a86-8a65-329887391970",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check array",
                  "fullTitle": "Check entity Verilog Check signal. Check array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"q\",\n        description: \"\"\n    },\n    type: \"reg [1:0]\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "d955460f-db6b-4ea8-9812-2d1b6aae2901",
                  "parentUUID": "9ee3721f-f049-4a86-8a65-329887391970",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d848e86-8553-4637-be51-e7d34808e0ff",
                "005b1c5f-6abd-4abb-bce1-ade0d35dbf44",
                "f75fac72-c96a-43fa-b143-c3f8e87396b3",
                "d955460f-db6b-4ea8-9812-2d1b6aae2901"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5de71f6-05b2-4fea-8c2d-925db54d779c",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 189,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "fa26a447-96cf-4673-a6e2-ce498b203fc9",
                  "parentUUID": "f5de71f6-05b2-4fea-8c2d-925db54d779c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"r\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"2\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "2d6e0283-3567-4780-9720-3429762b8862",
                  "parentUUID": "f5de71f6-05b2-4fea-8c2d-925db54d779c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d6e0283-3567-4780-9720-3429762b8862"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ddea8e18-1ff6-47cb-a4b1-ccfc534c4295",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 238,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "a60fecc2-ed5d-4c6e-bedc-d9589967f481",
                  "parentUUID": "ddea8e18-1ff6-47cb-a4b1-ccfc534c4295",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "1d63b19d-79e4-437d-b5d2-c564eeed76d2",
                  "parentUUID": "ddea8e18-1ff6-47cb-a4b1-ccfc534c4295",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d63b19d-79e4-437d-b5d2-c564eeed76d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "546561bd-737e-465f-9a52-e3e3dfef92d1",
              "title": "Check always.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check always.\"",
                  "fullTitle": "Check entity Verilog Check always. \"before all\" hook in \"Check always.\"",
                  "timedOut": false,
                  "duration": 235,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "3d950bb1-157d-4167-a32a-4515169a1dbf",
                  "parentUUID": "546561bd-737e-465f-9a52-e3e3dfef92d1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check always with sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always with sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"@(posedge a)\",\n    type: \"always\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "8cd417ac-b2d1-4f1a-8ceb-d5e59f271fc4",
                  "parentUUID": "546561bd-737e-465f-9a52-e3e3dfef92d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_comb without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_comb without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_comb\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "d13b41a7-92e7-41c1-bc19-9f96f4be69c7",
                  "parentUUID": "546561bd-737e-465f-9a52-e3e3dfef92d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_ff without sensitive list and with label",
                  "fullTitle": "Check entity Verilog Check always. Check always_ff without sensitive list and with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_ff\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "755b097a-b7a3-4169-9948-9002c7dc6432",
                  "parentUUID": "546561bd-737e-465f-9a52-e3e3dfef92d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_latch without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_latch without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_latch\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "59d08ab2-d1ad-4db0-8942-d279d2afc683",
                  "parentUUID": "546561bd-737e-465f-9a52-e3e3dfef92d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cd417ac-b2d1-4f1a-8ceb-d5e59f271fc4",
                "d13b41a7-92e7-41c1-bc19-9f96f4be69c7",
                "755b097a-b7a3-4169-9948-9002c7dc6432",
                "59d08ab2-d1ad-4db0-8942-d279d2afc683"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "383d3c39-08fd-452c-8c9b-04ee10f5347b",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity Verilog Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 298,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "f146f356-c9b9-46b4-a443-1bcf7d19bb37",
                  "parentUUID": "383d3c39-08fd-452c-8c9b-04ee10f5347b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity Verilog Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"test_entity_name_dut\",\n        description: \"\"\n    },\n    type: \"test_entity_name\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "c713f960-9f5e-4ce8-90cf-afb19f1f141a",
                  "parentUUID": "383d3c39-08fd-452c-8c9b-04ee10f5347b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c713f960-9f5e-4ce8-90cf-afb19f1f141a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b7160434-efdb-488b-b26e-b4522da919f7",
          "title": "Check interface declaration Verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_interface.spec.ts",
          "file": "/tests/parser/parser_verilog_interface.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7326dfd3-8e34-415e-b9a1-234c710fbb26",
              "title": "Check global.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check global.\"",
                  "fullTitle": "Check interface declaration Verilog Check global. \"before all\" hook in \"Check global.\"",
                  "timedOut": false,
                  "duration": 237,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "3ed4ab4f-1059-4819-9c7a-ab87247eee11",
                  "parentUUID": "7326dfd3-8e34-415e-b9a1-234c710fbb26",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check interface declaration Verilog Check global. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, '');",
                  "err": {},
                  "uuid": "85eafa53-0c49-43dd-b32e-af140b16241d",
                  "parentUUID": "7326dfd3-8e34-415e-b9a1-234c710fbb26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is interface declaration",
                  "fullTitle": "Check interface declaration Verilog Check global. Check type is interface declaration",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.INTERFACE_DECLARATION);",
                  "err": {},
                  "uuid": "28bfaff5-e501-444a-a961-ecd0efe67a0e",
                  "parentUUID": "7326dfd3-8e34-415e-b9a1-234c710fbb26",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85eafa53-0c49-43dd-b32e-af140b16241d",
                "28bfaff5-e501-444a-a961-ecd0efe67a0e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c665bca-b17d-427b-a997-96a48a9b4e4b",
              "title": "Check interfaces.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check interfaces.\"",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. \"before all\" hook in \"Check interfaces.\"",
                  "timedOut": false,
                  "duration": 292,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_interface_array();",
                  "err": {},
                  "uuid": "86c92160-94db-4cc7-bcff-6551fb2c1678",
                  "parentUUID": "2c665bca-b17d-427b-a997-96a48a9b4e4b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check interface 0",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[0], \"interface_0\");",
                  "err": {},
                  "uuid": "d2c98a67-cd5c-47af-9cda-0e0bda8cd5c6",
                  "parentUUID": "2c665bca-b17d-427b-a997-96a48a9b4e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check interface 1",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[1], \"interface_1\");",
                  "err": {},
                  "uuid": "5e3dc660-26e8-4137-9c07-922853736b3d",
                  "parentUUID": "2c665bca-b17d-427b-a997-96a48a9b4e4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2c98a67-cd5c-47af-9cda-0e0bda8cd5c6",
                "5e3dc660-26e8-4137-9c07-922853736b3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c38a8349-0f0c-406c-bfb4-25f3f46d1225",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check interface declaration Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 218,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "515cf9b4-c035-44d7-8f23-e454caedf958",
                  "parentUUID": "c38a8349-0f0c-406c-bfb4-25f3f46d1225",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check interface declaration Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst logic_item_0 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 9,\n            column: 0\n        },\n        name: \"l_0\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst logic_item_1 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 10,\n            column: 0\n        },\n        name: \"l_1\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"slot_t\",\n        description: \"\"\n    },\n    type: \"\",\n    logic: [logic_item_0, logic_item_1]\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "4e7ecd23-c579-4d05-b618-7f72f9fedad8",
                  "parentUUID": "c38a8349-0f0c-406c-bfb4-25f3f46d1225",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e7ecd23-c579-4d05-b618-7f72f9fedad8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2877880a-584e-4d8e-91ec-e101cd08ddfc",
          "title": "Check package Verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
          "file": "/tests/parser/parser_verilog_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f36ab28b-c9f9-476f-bd9f-8d2f1e054a1f",
              "title": "Check package.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check package.\"",
                  "fullTitle": "Check package Verilog Check package. \"before all\" hook in \"Check package.\"",
                  "timedOut": false,
                  "duration": 299,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "b53b709e-317a-43d8-b49c-2f7345de8aea",
                  "parentUUID": "f36ab28b-c9f9-476f-bd9f-8d2f1e054a1f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package Verilog Check package. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_pkg');",
                  "err": {},
                  "uuid": "c4738280-05c6-4545-8635-cb249deddc05",
                  "parentUUID": "f36ab28b-c9f9-476f-bd9f-8d2f1e054a1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is package",
                  "fullTitle": "Check package Verilog Check package. Check type is package",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "69c01977-8685-4442-9348-e7759a728441",
                  "parentUUID": "f36ab28b-c9f9-476f-bd9f-8d2f1e054a1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4738280-05c6-4545-8635-cb249deddc05",
                "69c01977-8685-4442-9348-e7759a728441"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f5ddd8b-c960-4c74-99b7-bf2c07cfa625",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 231,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "f376490f-2f57-4b29-bc24-49c0535e0370",
                  "parentUUID": "6f5ddd8b-c960-4c74-99b7-bf2c07cfa625",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "d5744d8d-5948-4ea2-ae7a-3bb80b225b6d",
                  "parentUUID": "6f5ddd8b-c960-4c74-99b7-bf2c07cfa625",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"9\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "7a7e390c-5777-4479-96e7-0b551d87a50b",
                  "parentUUID": "6f5ddd8b-c960-4c74-99b7-bf2c07cfa625",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"10\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "ba7178aa-e318-4760-9efa-f99da47593bd",
                  "parentUUID": "6f5ddd8b-c960-4c74-99b7-bf2c07cfa625",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5744d8d-5948-4ea2-ae7a-3bb80b225b6d",
                "7a7e390c-5777-4479-96e7-0b551d87a50b",
                "ba7178aa-e318-4760-9efa-f99da47593bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "573f0436-0531-4e8f-a4de-bf3e4324ca54",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 294,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "48df6131-b7d4-497f-b44d-2d5324cbedf4",
                  "parentUUID": "573f0436-0531-4e8f-a4de-bf3e4324ca54",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "9a305a07-f4ab-4ade-bb92-d24b81f06de2",
                  "parentUUID": "573f0436-0531-4e8f-a4de-bf3e4324ca54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a305a07-f4ab-4ade-bb92-d24b81f06de2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53b8c754-d0d8-48d8-974c-e5a8c7ac0dca",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 210,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "bb0be639-bc2c-4846-93c8-da89f984ef5f",
                  "parentUUID": "53b8c754-d0d8-48d8-974c-e5a8c7ac0dca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"op_list\",\n        description: \"\"\n    },\n    type: \"enum {ADD, SUB}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "89090a32-af53-4ac6-bbe9-984193879abd",
                  "parentUUID": "53b8c754-d0d8-48d8-974c-e5a8c7ac0dca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"port_t\",\n        description: \"\"\n    },\n    type: \"struct {logic [4:0] a, b; logic [9:0] m;}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "d7bc7eb5-798a-4103-be42-1006733e4de9",
                  "parentUUID": "53b8c754-d0d8-48d8-974c-e5a8c7ac0dca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89090a32-af53-4ac6-bbe9-984193879abd",
                "d7bc7eb5-798a-4103-be42-1006733e4de9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6da2b166-a117-42ea-82ff-539634179b70",
          "title": "Check entity VHDL",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
          "file": "/tests/parser/parser_vhdl_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad07f344-523a-4fe0-8559-493259e30fa0",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity VHDL Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "d8c690bd-5683-47dc-9ee8-0d13c55f5d0f",
                  "parentUUID": "ad07f344-523a-4fe0-8559-493259e30fa0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity VHDL Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "9d4529e0-024f-4949-815a-b18abacfcd8a",
                  "parentUUID": "ad07f344-523a-4fe0-8559-493259e30fa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity VHDL Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "56993832-8fb7-449f-b11d-34cc6b7af660",
                  "parentUUID": "ad07f344-523a-4fe0-8559-493259e30fa0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d4529e0-024f-4949-815a-b18abacfcd8a",
                "56993832-8fb7-449f-b11d-34cc6b7af660"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6cbe0f14-1c23-458b-9d4d-3859799bf04f",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity VHDL Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "d6f8fbe3-6075-4eba-af55-1f9f71178616",
                  "parentUUID": "6cbe0f14-1c23-458b-9d4d-3859799bf04f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"\",\n    type: \"integer\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "210fda03-ad26-4ce0-a366-53a79aed6f6c",
                  "parentUUID": "6cbe0f14-1c23-458b-9d4d-3859799bf04f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity VHDL Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "7ef48d84-c290-4a59-b9bb-923dc48dde84",
                  "parentUUID": "6cbe0f14-1c23-458b-9d4d-3859799bf04f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "71c67dc5-35e7-4f39-89ce-d86338b1b7de",
                  "parentUUID": "6cbe0f14-1c23-458b-9d4d-3859799bf04f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "6ca798db-6cf2-4cc6-9725-61aec4bd6032",
                  "parentUUID": "6cbe0f14-1c23-458b-9d4d-3859799bf04f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "210fda03-ad26-4ce0-a366-53a79aed6f6c",
                "7ef48d84-c290-4a59-b9bb-923dc48dde84",
                "71c67dc5-35e7-4f39-89ce-d86338b1b7de",
                "6ca798db-6cf2-4cc6-9725-61aec4bd6032"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72e08984-7e8e-43f4-bdc9-7d5198fab8d5",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity VHDL Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "64be7a99-3f38-4cb9-b529-91ebcf978255",
                  "parentUUID": "72e08984-7e8e-43f4-bdc9-7d5198fab8d5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity VHDL Check port. Check input port",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"x\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "8045e03c-21a7-4593-86d4-22b421a6013f",
                  "parentUUID": "72e08984-7e8e-43f4-bdc9-7d5198fab8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity VHDL Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"y\",\n        description: \"\"\n    },\n    direction: \"out\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "096c254c-b7fe-4c50-a802-29d6a1ad31df",
                  "parentUUID": "72e08984-7e8e-43f4-bdc9-7d5198fab8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check inout port",
                  "fullTitle": "Check entity VHDL Check port. Check inout port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"z\",\n        description: \"\"\n    },\n    direction: \"inout\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "fd2ee9a4-460f-489d-8b0f-05619f35e3b2",
                  "parentUUID": "72e08984-7e8e-43f4-bdc9-7d5198fab8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check std_logic_vector port",
                  "fullTitle": "Check entity VHDL Check port. Check std_logic_vector port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "dde2f20f-5f10-44f9-a629-42ddd3864f49",
                  "parentUUID": "72e08984-7e8e-43f4-bdc9-7d5198fab8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check port with default value",
                  "fullTitle": "Check entity VHDL Check port. Check port with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: '\"0010\"',\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "c9ecfb47-2c19-4a7e-8929-72b3aa7ecd5b",
                  "parentUUID": "72e08984-7e8e-43f4-bdc9-7d5198fab8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "a5f16f24-2dbf-4e26-930c-666e23ecdf07",
                  "parentUUID": "72e08984-7e8e-43f4-bdc9-7d5198fab8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "c742898c-e5d4-4a43-9138-b0b566a28fd9",
                  "parentUUID": "72e08984-7e8e-43f4-bdc9-7d5198fab8d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8045e03c-21a7-4593-86d4-22b421a6013f",
                "096c254c-b7fe-4c50-a802-29d6a1ad31df",
                "fd2ee9a4-460f-489d-8b0f-05619f35e3b2",
                "dde2f20f-5f10-44f9-a629-42ddd3864f49",
                "c9ecfb47-2c19-4a7e-8929-72b3aa7ecd5b",
                "a5f16f24-2dbf-4e26-930c-666e23ecdf07",
                "c742898c-e5d4-4a43-9138-b0b566a28fd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c43e94c-a329-49aa-9e27-00b7ad690576",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "32f26272-b422-4871-98a4-faab4e81a0d9",
                  "parentUUID": "4c43e94c-a329-49aa-9e27-00b7ad690576",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "4bcca7ac-ee5e-48e2-a9a9-17191e2416bc",
                  "parentUUID": "4c43e94c-a329-49aa-9e27-00b7ad690576",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "8dad2d66-caea-45e4-b950-2f31396c931c",
                  "parentUUID": "4c43e94c-a329-49aa-9e27-00b7ad690576",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "f7242762-59d2-421b-a46d-fe56a5d0c378",
                  "parentUUID": "4c43e94c-a329-49aa-9e27-00b7ad690576",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4bcca7ac-ee5e-48e2-a9a9-17191e2416bc",
                "8dad2d66-caea-45e4-b950-2f31396c931c",
                "f7242762-59d2-421b-a46d-fe56a5d0c378"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77345a44-457a-4cd2-ac51-2e88bd954358",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "e255d922-4c2f-437c-9369-38f2df1abfa3",
                  "parentUUID": "77345a44-457a-4cd2-ac51-2e88bd954358",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "8b39f69a-9a6a-41bd-87d5-f63e639a0de3",
                  "parentUUID": "77345a44-457a-4cd2-ac51-2e88bd954358",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "d959f164-9c8a-4ca1-a5c9-66e351cf00d1",
                  "parentUUID": "77345a44-457a-4cd2-ac51-2e88bd954358",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b39f69a-9a6a-41bd-87d5-f63e639a0de3",
                "d959f164-9c8a-4ca1-a5c9-66e351cf00d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc72d46a-c25c-4563-803a-44d9e41e287d",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check entity VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "7e174016-5dc4-4a13-afa7-644b2813e280",
                  "parentUUID": "fc72d46a-c25c-4563-803a-44d9e41e287d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, END)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "76ca4efb-15c7-4751-bac1-bdf26fee5bbc",
                  "parentUUID": "fc72d46a-c25c-4563-803a-44d9e41e287d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76ca4efb-15c7-4751-bac1-bdf26fee5bbc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7885e8f8-818d-4f9b-8439-7be591c824e8",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "96a3adbe-abd3-40ed-bfec-db1ef035f0f6",
                  "parentUUID": "7885e8f8-818d-4f9b-8439-7be591c824e8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(minutes : integer := 0; seconds : integer := 0)\",\n    return: \"return integer\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "f1683d54-6a5b-42a8-ad2f-0afa9fa90c3c",
                  "parentUUID": "7885e8f8-818d-4f9b-8439-7be591c824e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1683d54-6a5b-42a8-ad2f-0afa9fa90c3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f580f67-24c4-4758-bd9e-1de729e557bd",
              "title": "Check process.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check process.\"",
                  "fullTitle": "Check entity VHDL Check process. \"before all\" hook in \"Check process.\"",
                  "timedOut": false,
                  "duration": 106,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "6967402c-5f9b-48fc-8577-9d36e1457c72",
                  "parentUUID": "4f580f67-24c4-4758-bd9e-1de729e557bd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check without sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check without sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "9267a3da-487b-43e1-aa69-f61ca9b75d3f",
                  "parentUUID": "4f580f67-24c4-4758-bd9e-1de729e557bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check with sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"clk0, reset\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "1535f4c9-4900-4ed1-9399-4bf8559c9175",
                  "parentUUID": "4f580f67-24c4-4758-bd9e-1de729e557bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check process. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "46a195b2-9208-4bfc-ac39-0c1b54d96f80",
                  "parentUUID": "4f580f67-24c4-4758-bd9e-1de729e557bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9267a3da-487b-43e1-aa69-f61ca9b75d3f",
                "1535f4c9-4900-4ed1-9399-4bf8559c9175",
                "46a195b2-9208-4bfc-ac39-0c1b54d96f80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "66499c11-820b-4236-9bc6-2591f5a7c3f3",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity VHDL Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "f93fb4ad-506c-4fa2-b299-a7a5ea4ad8b4",
                  "parentUUID": "66499c11-820b-4236-9bc6-2591f5a7c3f3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"uut_0\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "026c66b9-627f-4ac3-a373-3e17fa3fa110",
                  "parentUUID": "66499c11-820b-4236-9bc6-2591f5a7c3f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check without label",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "bc945112-8480-4f8e-acd2-379f2d8667b7",
                  "parentUUID": "66499c11-820b-4236-9bc6-2591f5a7c3f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "026c66b9-627f-4ac3-a373-3e17fa3fa110",
                "bc945112-8480-4f8e-acd2-379f2d8667b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b6cf8f05-0664-48cd-9f94-4cfd7d117bf7",
          "title": "Check package VHDL",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
          "file": "/tests/parser/parser_vhdl_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30f279f8-92e8-450d-86c1-263fd2e708cc",
              "title": "Check pacakge.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check pacakge.\"",
                  "fullTitle": "Check package VHDL Check pacakge. \"before all\" hook in \"Check pacakge.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "5c24e6db-6337-4a8b-983f-c48bb54af464",
                  "parentUUID": "30f279f8-92e8-450d-86c1-263fd2e708cc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package VHDL Check pacakge. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_package_name');",
                  "err": {},
                  "uuid": "209c9f5f-1839-4d94-8035-81fa6c1e4de3",
                  "parentUUID": "30f279f8-92e8-450d-86c1-263fd2e708cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check package VHDL Check pacakge. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common_1.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "aa9af09c-44c5-4701-9740-d7549472ab64",
                  "parentUUID": "30f279f8-92e8-450d-86c1-263fd2e708cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "209c9f5f-1839-4d94-8035-81fa6c1e4de3",
                "aa9af09c-44c5-4701-9740-d7549472ab64"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "54e2c193-938b-47c7-9712-c1afe2c41f5b",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check package VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "aa7328e5-e7af-49be-9420-bc750ae3fd93",
                  "parentUUID": "54e2c193-938b-47c7-9712-c1afe2c41f5b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "d443b37b-b859-46e7-b700-70da959f7ba4",
                  "parentUUID": "54e2c193-938b-47c7-9712-c1afe2c41f5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "ccc0256a-4223-4452-ab8c-29ac7b13cfee",
                  "parentUUID": "54e2c193-938b-47c7-9712-c1afe2c41f5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "aad739e6-1ea2-45bd-addd-37b9a4949932",
                  "parentUUID": "54e2c193-938b-47c7-9712-c1afe2c41f5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d443b37b-b859-46e7-b700-70da959f7ba4",
                "ccc0256a-4223-4452-ab8c-29ac7b13cfee",
                "aad739e6-1ea2-45bd-addd-37b9a4949932"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "523aab0c-f864-47a5-909c-1c6125e1836a",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "edb3c104-87fa-45fc-8bed-88624633d2c9",
                  "parentUUID": "523aab0c-f864-47a5-909c-1c6125e1836a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "9ff86c3b-d958-4c80-b886-b35454224e9e",
                  "parentUUID": "523aab0c-f864-47a5-909c-1c6125e1836a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "0c340833-0ce7-4b2c-9eb1-41c8000a11ca",
                  "parentUUID": "523aab0c-f864-47a5-909c-1c6125e1836a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "d27d1bf0-d8e3-4642-b4cd-035c60946bb6",
                  "parentUUID": "523aab0c-f864-47a5-909c-1c6125e1836a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ff86c3b-d958-4c80-b886-b35454224e9e",
                "0c340833-0ce7-4b2c-9eb1-41c8000a11ca",
                "d27d1bf0-d8e3-4642-b4cd-035c60946bb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "254edcfa-8f1e-4db2-8d1b-8f68d723f9e4",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "fa626ab5-81e7-4edb-a163-8a02cbca926d",
                  "parentUUID": "254edcfa-8f1e-4db2-8d1b-8f68d723f9e4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, ENDS)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "7584ff67-d258-46a6-82b4-5b07b385529f",
                  "parentUUID": "254edcfa-8f1e-4db2-8d1b-8f68d723f9e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7584ff67-d258-46a6-82b4-5b07b385529f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45304df4-c771-4004-a665-30c866180173",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "e5418dac-9af4-4940-8c04-956580a3cc1e",
                  "parentUUID": "45304df4-c771-4004-a665-30c866180173",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(signal minutes: in integer; signal seconds: out integer;)\",\n    return: \"\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "1f3e479f-d284-4212-9df2-9be9297298ed",
                  "parentUUID": "45304df4-c771-4004-a665-30c866180173",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f3e479f-d284-4212-9df2-9be9297298ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "790b3f94-5ba8-459b-9dfb-019adaae466a",
          "title": "Test local process",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check exec successful",
              "fullTitle": "Test local process Check exec successful",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'echo \"hello world!\"';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: 'hello world!',\n    stderr: '',\n    return_value: 0,\n    successful: true\n};\nconst os = process.platform;\nif (os === 'win32') {\n    expected_result.stdout = \"\\\"hello world!\\\"\";\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "025c4775-7dda-4048-a6b8-334378def061",
              "parentUUID": "790b3f94-5ba8-459b-9dfb-019adaae466a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check exec not successful",
              "fullTitle": "Test local process Check exec not successful",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'asdf';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: '',\n    stderr: '/bin/sh: 1: asdf: not found',\n    return_value: -1,\n    successful: false\n};\nconst os = process.platform;\nif (os === 'darwin' || os === 'win32') {\n    expected_result.stderr = '';\n    result.stderr = '';\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "342c87e0-4e4e-4e22-a269-a91460be5d21",
              "parentUUID": "790b3f94-5ba8-459b-9dfb-019adaae466a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "025c4775-7dda-4048-a6b8-334378def061",
            "342c87e0-4e4e-4e22-a269-a91460be5d21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "caade9f6-45f9-487d-9003-3895899d654c",
          "title": "Test utils",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check create temporal file",
              "fullTitle": "Test utils Check create temporal file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expected_text = \"sample of text\";\nconst tmp_file_path = await (0, utils_1.create_temp_file)(expected_text);\nconst fs = require('fs');\nconst current_text = fs.readFileSync(tmp_file_path);\n(0, assert_1.equal)(current_text, expected_text);",
              "err": {},
              "uuid": "e2968974-26ce-432e-8267-91b8a5a0e156",
              "parentUUID": "caade9f6-45f9-487d-9003-3895899d654c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2968974-26ce-432e-8267-91b8a5a0e156"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "228de1af-75c5-4b11-874e-716e753375fa",
          "title": "Test Python utils",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/process/python.spec.ts",
          "file": "/tests/process/python.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check get_python3_path in system path",
              "fullTitle": "Test Python utils Check get_python3_path in system path",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "359158da-c343-400f-87c8-73a446f31cb5",
              "parentUUID": "228de1af-75c5-4b11-874e-716e753375fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in custom path",
              "fullTitle": "Test Python utils Check get_python3_path in custom path",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst opt = {\n    path: \"/usr/bin/python3\"\n};\nconst system_os = (0, utils_1.get_os)();\nif (system_os === common.OS.MAC) {\n    opt.path = \"/usr/local/opt/python@3.9/bin/python3.9\";\n}\nelse if (system_os === common.OS.WINDOWS) {\n    opt.path = \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.9.13\\\\x64\\\\python3.exe\";\n}\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "75c76be6-6224-4ce1-b764-cdd214b1ff81",
              "parentUUID": "228de1af-75c5-4b11-874e-716e753375fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in a bad custom path ",
              "fullTitle": "Test Python utils Check get_python3_path in a bad custom path ",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"/usr/bin/python999\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "9ab9f1ea-531d-4d70-9dfd-9ff8971ec414",
              "parentUUID": "228de1af-75c5-4b11-874e-716e753375fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package and true",
              "fullTitle": "Test Python utils Check python3 package and true",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = 'time';\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "e34818c1-8281-4d64-9e14-1ac40332313a",
              "parentUUID": "228de1af-75c5-4b11-874e-716e753375fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package and false",
              "fullTitle": "Test Python utils Check python3 package and false",
              "timedOut": false,
              "duration": 270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = 'time1234';\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "19bc3775-7252-4cd2-ac90-6a6fd2569c8e",
              "parentUUID": "228de1af-75c5-4b11-874e-716e753375fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and true",
              "fullTitle": "Test Python utils Check python3 package list and true",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "711f1ad6-b526-4cdf-ad36-a1b235f049a0",
              "parentUUID": "228de1af-75c5-4b11-874e-716e753375fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and false",
              "fullTitle": "Test Python utils Check python3 package list and false",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os123'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "a90d281c-3da3-491a-b466-feaea180127e",
              "parentUUID": "228de1af-75c5-4b11-874e-716e753375fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "359158da-c343-400f-87c8-73a446f31cb5",
            "75c76be6-6224-4ce1-b764-cdd214b1ff81",
            "9ab9f1ea-531d-4d70-9dfd-9ff8971ec414",
            "e34818c1-8281-4d64-9e14-1ac40332313a",
            "19bc3775-7252-4cd2-ac90-6a6fd2569c8e",
            "711f1ad6-b526-4cdf-ad36-a1b235f049a0",
            "a90d281c-3da3-491a-b466-feaea180127e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 841,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "827e3a26-9f05-4547-8f02-b9c6feb24536",
          "title": "Check template VHDL element",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template VHDL element Check cocotb",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "38bb3815-e7e1-40e3-897d-843baf376527",
              "parentUUID": "827e3a26-9f05-4547-8f02-b9c6feb24536",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template VHDL element Check testbench_normal",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "20eeeca8-1638-4885-a357-a6e7b75db3f4",
              "parentUUID": "827e3a26-9f05-4547-8f02-b9c6feb24536",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template VHDL element Check testbench_vunit",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "74cf9114-85bd-4380-ace2-2ce63c908eee",
              "parentUUID": "827e3a26-9f05-4547-8f02-b9c6feb24536",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_component",
              "fullTitle": "Check template VHDL element Check hdl_element_component",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "8e80b05c-a901-4d63-a802-6e44b6fdedbd",
              "parentUUID": "827e3a26-9f05-4547-8f02-b9c6feb24536",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance_vhdl_new",
              "fullTitle": "Check template VHDL element Check hdl_element_instance_vhdl_new",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "6349ac10-60ad-4aa9-bc13-136c27e0e292",
              "parentUUID": "827e3a26-9f05-4547-8f02-b9c6feb24536",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance",
              "fullTitle": "Check template VHDL element Check hdl_element_instance",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "3259d6c8-b9a7-49df-9a8a-3060ecd2bacd",
              "parentUUID": "827e3a26-9f05-4547-8f02-b9c6feb24536",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template VHDL element Check hdl_element_signal",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "f8244ab7-9dba-4cbc-87b7-e261acc32f16",
              "parentUUID": "827e3a26-9f05-4547-8f02-b9c6feb24536",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_component",
              "fullTitle": "Check template VHDL element Check hdl_element_mix_component",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \"\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "31290bb6-f381-43bd-bd0e-d5909c916ef4",
              "parentUUID": "827e3a26-9f05-4547-8f02-b9c6feb24536",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38bb3815-e7e1-40e3-897d-843baf376527",
            "20eeeca8-1638-4885-a357-a6e7b75db3f4",
            "74cf9114-85bd-4380-ace2-2ce63c908eee",
            "8e80b05c-a901-4d63-a802-6e44b6fdedbd",
            "6349ac10-60ad-4aa9-bc13-136c27e0e292",
            "3259d6c8-b9a7-49df-9a8a-3060ecd2bacd",
            "f8244ab7-9dba-4cbc-87b7-e261acc32f16",
            "31290bb6-f381-43bd-bd0e-d5909c916ef4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 192,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "63bfc33e-11d1-4f5e-ac29-b9bd1b1e6626",
          "title": "Check get language",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From path Verilog",
              "fullTitle": "Check get language From path Verilog",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.v';\nconst lang_expected = general_1.HDL_LANG.VERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "97a5b22b-4f88-44cb-a859-59cd36e85bb7",
              "parentUUID": "63bfc33e-11d1-4f5e-ac29-b9bd1b1e6626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path SystemVerilog",
              "fullTitle": "Check get language From path SystemVerilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.sv';\nconst lang_expected = general_1.HDL_LANG.SYSTEMVERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "bcb69546-7f35-4797-9d39-e7eeb95ac13e",
              "parentUUID": "63bfc33e-11d1-4f5e-ac29-b9bd1b1e6626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path VHDL",
              "fullTitle": "Check get language From path VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.vhd';\nconst lang_expected = general_1.HDL_LANG.VHDL;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "9ff43591-ec8d-4d34-8191-81bf5a46b986",
              "parentUUID": "63bfc33e-11d1-4f5e-ac29-b9bd1b1e6626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path NONE",
              "fullTitle": "Check get language From path NONE",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.txt';\nconst lang_expected = general_1.HDL_LANG.NONE;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "eb0cb6bf-678c-4332-84e1-bcb984db36e9",
              "parentUUID": "63bfc33e-11d1-4f5e-ac29-b9bd1b1e6626",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97a5b22b-4f88-44cb-a859-59cd36e85bb7",
            "bcb69546-7f35-4797-9d39-e7eeb95ac13e",
            "9ff43591-ec8d-4d34-8191-81bf5a46b986",
            "eb0cb6bf-678c-4332-84e1-bcb984db36e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f7ff0602-342e-402a-a3cd-a0228c9c15a0",
          "title": "Check remove comments",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove comments VHDL",
              "fullTitle": "Check remove comments Remove comments VHDL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n-- One line comment\n-- One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n/           \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_vhdl(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "c046cf22-ebe9-41bb-ade6-3b4395d39cdf",
              "parentUUID": "f7ff0602-342e-402a-a3cd-a0228c9c15a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove comments Verilog",
              "fullTitle": "Check remove comments Remove comments Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n// One line comment\n// One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n            \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_verilog(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "2c5d7f11-2425-4e8b-8418-43fcb9513f14",
              "parentUUID": "f7ff0602-342e-402a-a3cd-a0228c9c15a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c046cf22-ebe9-41bb-ade6-3b4395d39cdf",
            "2c5d7f11-2425-4e8b-8418-43fcb9513f14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9df83d3f-3824-428e-8c0d-3dd3865738fe",
          "title": "Check get top level with regex",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From VHDL code",
              "fullTitle": "Check get top level with regex From VHDL code",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(`Get top level VHDL`, async function () {\n    const code_dummy = `\n    library ieee;\n    use ieee.std_logic_1164.all;\n    use ieee.numeric_std.all;\n    entity test_entity_name is\n    generic (\n        a : integer;\n        b : unsigned;\n        c : signed;\n        d : std_logic;\n        e : std_logic_vector;\n        f : std_logic_vector(5 downto 0)\n      );\n    port(\n      g : in std_logic;\n      h : out std_logic;\n      i : inout std_logic\n    );\n    end test_entity_name;  \n    architecture e_arch of test_entity_name is\n    begin \n    end e_arch;\n    `;\n    const expected = 'test_entity_name';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n    (0, assert_1.equal)(current, expected);\n});\nit(`Get top level Verilog`, async function () {\n    const code_dummy = `\n    module test_entity_name2 \n        #(\n            parameter a=8,\n            parameter b=9,\n            parameter c=10, d=11\n        )\n        (\n            input e,\n            output f,\n            input reg g,\n            input wire h,\n            input reg [7:0] i, j,\n            input wire [9:0] k,\n            output wire [9:0] l\n        );  \n    \n        function [7:0] sum;  \n            input [7:0] a, b;  \n            begin  \n                sum = a + b;  \n            end  \n        endfunction\n    \n        wire m;\n        wire n, p;\n        reg [1:0] q;\n    \n        localparam r = 2;\n    \n        always @(posedge a) begin : label_0\n        end\n    \n        always_comb begin\n        end\n    \n        always_ff begin : label_1\n        end\n    \n        always_latch begin\n        end\n    \n        test_entity_name \n        #(\n          .a(a ),\n          .b(b ),\n          .c(c ),\n          .d (d )\n        )\n        test_entity_name_dut (\n          .e (e ),\n          .f (f ),\n          .g (g ),\n          .h (h ),\n          .i (i ),\n          .j (j ),\n          .k (k ),\n          .l  ( l)\n        );\n      \n    endmodule\n    `;\n    const expected = 'test_entity_name2';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n    (0, assert_1.equal)(current, expected);\n});",
              "err": {},
              "uuid": "80c7de2b-c57b-4c22-ac4e-130a926234ef",
              "parentUUID": "9df83d3f-3824-428e-8c0d-3dd3865738fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80c7de2b-c57b-4c22-ac4e-130a926234ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "db4e0187-d376-4056-9a58-bcd3103941d6",
          "title": "Check hover VHDL",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover VHDL Binary unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"0011\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "7018d1d3-4a3c-463b-9259-4d07fa12a75e",
              "parentUUID": "db4e0187-d376-4056-9a58-bcd3103941d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover VHDL Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1101\"';\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a2b7410d-aa9e-401d-a770-617898f2801b",
              "parentUUID": "db4e0187-d376-4056-9a58-bcd3103941d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1_10_0\"';\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "ed9246c6-e990-4df5-8327-0233e90fed71",
              "parentUUID": "db4e0187-d376-4056-9a58-bcd3103941d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"0aB0\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "597a8e04-5b1b-4e60-9489-692384e840c4",
              "parentUUID": "db4e0187-d376-4056-9a58-bcd3103941d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"aaB0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "6506e46d-422c-42c2-8f11-09e03ddea9d9",
              "parentUUID": "db4e0187-d376-4056-9a58-bcd3103941d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"a_a_b0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "1c8da101-c3ec-47f6-bac2-043a725437e6",
              "parentUUID": "db4e0187-d376-4056-9a58-bcd3103941d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover VHDL Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"0175\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "3bfc042f-2ea5-47c6-aaef-f4e4dfbde9b2",
              "parentUUID": "db4e0187-d376-4056-9a58-bcd3103941d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover VHDL Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'O\"232\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "53c45343-b89b-405a-9e1f-666dd438e409",
              "parentUUID": "db4e0187-d376-4056-9a58-bcd3103941d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"2_3_2\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "b5006bb6-d7e4-4e93-8939-ed45a7bb8918",
              "parentUUID": "db4e0187-d376-4056-9a58-bcd3103941d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7018d1d3-4a3c-463b-9259-4d07fa12a75e",
            "a2b7410d-aa9e-401d-a770-617898f2801b",
            "ed9246c6-e990-4df5-8327-0233e90fed71",
            "597a8e04-5b1b-4e60-9489-692384e840c4",
            "6506e46d-422c-42c2-8f11-09e03ddea9d9",
            "1c8da101-c3ec-47f6-bac2-043a725437e6",
            "3bfc042f-2ea5-47c6-aaef-f4e4dfbde9b2",
            "53c45343-b89b-405a-9e1f-666dd438e409",
            "b5006bb6-d7e4-4e93-8939-ed45a7bb8918"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "69a047a8-b614-4696-a859-a379a830d461",
          "title": "Check hover Verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover Verilog Binary unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b0011'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "eaaada16-fb8c-4d70-9391-7c2b01959d4d",
              "parentUUID": "69a047a8-b614-4696-a859-a379a830d461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover Verilog Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1101'\";\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "e99bd987-3f22-401d-b00a-a010104d157b",
              "parentUUID": "69a047a8-b614-4696-a859-a379a830d461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1_10_0'\";\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "8eed126e-710c-44af-9c57-ace8e8dd8c27",
              "parentUUID": "69a047a8-b614-4696-a859-a379a830d461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'h0aB0'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "53dcdb44-b622-43ea-bb94-adbe47d4249b",
              "parentUUID": "69a047a8-b614-4696-a859-a379a830d461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'haaB0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a616b245-a7f0-4452-972d-384ca0b7e85d",
              "parentUUID": "69a047a8-b614-4696-a859-a379a830d461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'ha_a_b0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "21885d72-cccd-49cd-82b9-9945f94b03b9",
              "parentUUID": "69a047a8-b614-4696-a859-a379a830d461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover Verilog Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o0175'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "fbc22ff1-4f5e-4742-a97c-3dd529c56a97",
              "parentUUID": "69a047a8-b614-4696-a859-a379a830d461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover Verilog Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o232'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "12ef46e6-83f9-41f7-b2bb-105b26257329",
              "parentUUID": "69a047a8-b614-4696-a859-a379a830d461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o2_3_2'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "44efef86-a7b6-44e2-a91b-25b4f2f1a2c3",
              "parentUUID": "69a047a8-b614-4696-a859-a379a830d461",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eaaada16-fb8c-4d70-9391-7c2b01959d4d",
            "e99bd987-3f22-401d-b00a-a010104d157b",
            "8eed126e-710c-44af-9c57-ace8e8dd8c27",
            "53dcdb44-b622-43ea-bb94-adbe47d4249b",
            "a616b245-a7f0-4452-972d-384ca0b7e85d",
            "21885d72-cccd-49cd-82b9-9945f94b03b9",
            "fbc22ff1-4f5e-4742-a97c-3dd529c56a97",
            "12ef46e6-83f9-41f7-b2bb-105b26257329",
            "44efef86-a7b6-44e2-a91b-25b4f2f1a2c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "fea0ef8d-5f20-4730-9e92-4e7336f42fb9",
        "896c7974-d5f9-4b4e-98ae-4590eb683583"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default"
      },
      "version": "6.2.0"
    }
  }
}